# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI Complete

on:
  workflow_run:
    workflows: [CI]
    types:
      - completed

run-name: Build Scans for ${{ github.event.workflow_run.display_title}}

# This workflow runs after the completion of the CI workflow triggered on a "pull_request" event.
# The "pull_request" event type is run in an unprivileged context without access to the repository
# secrets. This means that PRs from public forks cannot publish Gradle Build Scans or modify the
# PR contents.
#
# This "workflow_run" triggered workflow is run in a privileged context and so does have access to
# the repository secrets. Here we can download the build scan files produced by a PR and publish
# them to ge.apache.org.
#
# If we need to do things like comment on, label, or otherwise modify PRs from public forks. This
# workflow is the place to do it.

jobs:
  upload-build-scan:
    # Skip this workflow if CI was run for anything other than "pull_request" (like "push").
    # Also skip this workflow if the PR was from apache/kafka. Those will have already published the build scan in CI.
    if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.head_repository.full_name != 'apache/kafka' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 17, 11 ]
    outputs:
      build-scan-url-11: ${{ steps.publish-build-scan.outputs.build-scan-url-11 }}
      build-scan-url-17: ${{ steps.publish-build-scan.outputs.build-scan-url-17 }}
    steps:
      - name: Env
        run: printenv
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials:
            false
      - name: Setup Gradle
        uses: ./.github/actions/setup-gradle
        with:
          java-version: ${{ matrix.java }}
          develocity-access-key: ${{ secrets.GE_ACCESS_TOKEN }}
      - uses: actions/download-artifact@v4
        with:
          github-token: ${{ github.token }}
          run-id: ${{ github.event.workflow_run.id }}
          name: build-scan-test-${{ matrix.java }}
          path: ~/.gradle/build-scan-data  # This is where Gradle buffers unpublished build scan data when --no-scan is given
      - name: Publish scan
        id: publish-build-scan
        run: |
          ./gradlew --info buildScanPublishPrevious > gradle.out
          SCAN_URL=$(grep '^https://.*$' gradle.out)
          echo "Published build scan to $SCAN_URL"
          echo "build-scan-url-${{ matrix.java }}=$SCAN_URL" >> $GITHUB_OUTPUT

  update-pr:
    needs: upload-build-scan
    runs-on: ubuntu-latest
    steps:
      - name: Update PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
          REPO: ${{ github.event.workflow_run.head_repository.full_name }}
          SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          echo "Build scans published for workflow ${{ github.event.workflow_run.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "Java 11: ${{ needs.upload-build-scan.outputs.build-scan-url-11 }}" >> $GITHUB_STEP_SUMMARY
          echo "Java 17: ${{ needs.upload-build-scan.outputs.build-scan-url-17 }}" >> $GITHUB_STEP_SUMMARY
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ env.REPO }}/statuses/${{ env.SHA }} \
          -f "state=success" -f "target_url=${{ needs.upload-build-scan.outputs.build-scan-url-11 }}" \
          -f "description=The build scan was successfully published" \
          -f "context=Gradle Build Scan / Java 11"
          gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ env.REPO }}/statuses/${{ env.SHA }} \
          -f "state=success" -f "target_url=${{ needs.upload-build-scan.outputs.build-scan-url-17 }}" \
          -f "description=The build scan was successfully published" \
          -f "context=Gradle Build Scan / Java 17"
