Starting a Gradle Daemon, 3 stopped Daemons could not be reused, use --status for details

> Configure project :
Starting build with version 3.3.0-SNAPSHOT (commit id ece00527) using Gradle 7.4.2, Java 17 and Scala 2.13.6
Build properties: maxParallelForks=12, maxScalacThreads=8, maxTestRetries=0

> Task :server-common:processResources NO-SOURCE
> Task :streams:test-utils:processResources NO-SOURCE
> Task :storage:api:processResources NO-SOURCE
> Task :storage:processResources UP-TO-DATE
> Task :raft:processResources UP-TO-DATE
> Task :core:processResources UP-TO-DATE
> Task :streams:processResources UP-TO-DATE
> Task :metadata:processResources UP-TO-DATE
> Task :raft:processTestResources UP-TO-DATE
> Task :core:processTestResources UP-TO-DATE
> Task :metadata:processTestResources UP-TO-DATE
> Task :server-common:createVersionFile
> Task :storage:createVersionFile
> Task :storage:api:createVersionFile
> Task :raft:createVersionFile
> Task :streams:createStreamsVersionFile
> Task :streams:processTestResources UP-TO-DATE
> Task :generator:compileJava UP-TO-DATE
> Task :generator:processResources NO-SOURCE
> Task :generator:classes UP-TO-DATE
> Task :clients:processResources UP-TO-DATE
> Task :clients:createVersionFile
> Task :generator:jar UP-TO-DATE
> Task :clients:processTestResources UP-TO-DATE
> Task :core:processMessages UP-TO-DATE
> Task :storage:processMessages UP-TO-DATE
> Task :streams:processMessages UP-TO-DATE
> Task :raft:processMessages UP-TO-DATE
> Task :metadata:processMessages UP-TO-DATE
> Task :clients:processMessages UP-TO-DATE
> Task :clients:compileJava UP-TO-DATE
> Task :clients:classes UP-TO-DATE
> Task :storage:api:compileJava UP-TO-DATE
> Task :storage:api:classes UP-TO-DATE
> Task :server-common:compileJava UP-TO-DATE
> Task :server-common:classes UP-TO-DATE
> Task :storage:compileJava UP-TO-DATE
> Task :storage:classes UP-TO-DATE
> Task :raft:compileJava UP-TO-DATE
> Task :raft:classes UP-TO-DATE
> Task :storage:api:jar
> Task :server-common:jar
> Task :storage:jar
> Task :metadata:compileJava UP-TO-DATE
> Task :metadata:classes UP-TO-DATE
> Task :core:compileJava NO-SOURCE
> Task :metadata:jar UP-TO-DATE
> Task :raft:jar
> Task :streams:compileJava UP-TO-DATE
> Task :streams:classes UP-TO-DATE
> Task :streams:test-utils:compileJava UP-TO-DATE
> Task :streams:test-utils:classes UP-TO-DATE
> Task :core:compileScala UP-TO-DATE
> Task :core:classes UP-TO-DATE
> Task :clients:jar
> Task :clients:processTestMessages UP-TO-DATE
> Task :streams:copyDependantLibs UP-TO-DATE
> Task :streams:jar UP-TO-DATE
> Task :streams:test-utils:copyDependantLibs
> Task :streams:test-utils:jar UP-TO-DATE
> Task :clients:compileTestJava UP-TO-DATE
> Task :clients:testClasses UP-TO-DATE
> Task :raft:compileTestJava UP-TO-DATE
> Task :raft:testClasses UP-TO-DATE
> Task :metadata:compileTestJava UP-TO-DATE
> Task :metadata:testClasses UP-TO-DATE
> Task :core:copyDependantLibs
> Task :core:jar UP-TO-DATE
> Task :core:compileTestJava NO-SOURCE
> Task :core:compileTestScala UP-TO-DATE
> Task :core:testClasses UP-TO-DATE
> Task :streams:compileTestJava
> Task :streams:testClasses

> Task :streams:unitTest

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowForUnknownKeyTypeForBuiltinTypes PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowIfValueClassIsNullForBuiltinTypes PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowIfTopicNameIsNull PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowIfKeyClassIsNull PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldReturnSerdesForBuiltInKeyAndValueTypesForBuiltinTypes PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowIfTopicNameIsNullForBuiltinTypes PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowIfIncompatibleSerdeForKey PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowForUnknownValueTypeForBuiltinTypes PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowIfKeyClassIsNullForBuiltinTypes PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowIfIncompatibleSerdeForValue PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldSkipValueAndTimestampeInformationForErrorOnTimestampAndValueSerialization PASSED

org.apache.kafka.streams.state.StateSerdesTest > shouldThrowIfValueClassIsNull PASSED

org.apache.kafka.streams.state.HostInfoTest > shouldReturnNullHostInfoForNullEndPoint PASSED

org.apache.kafka.streams.state.HostInfoTest > shouldReturnNullHostInfoForEmptyEndPoint PASSED

org.apache.kafka.streams.state.HostInfoTest > shouldCreateHostInfo PASSED

org.apache.kafka.streams.state.HostInfoTest > shouldThrowConfigExceptionForNonsenseEndPoint PASSED

org.apache.kafka.streams.state.StreamsMetadataTest > shouldNotBeEqualIfDifferStateStoreNames PASSED

org.apache.kafka.streams.state.StreamsMetadataTest > shouldBeEqualsIfSameObject PASSED

org.apache.kafka.streams.state.StreamsMetadataTest > shouldNotBeEqualIfDifferInTopicPartitions PASSED

org.apache.kafka.streams.state.StreamsMetadataTest > shouldNotBeEqualIfDifferInStandByStores PASSED

org.apache.kafka.streams.state.StreamsMetadataTest > shouldNotAllowModificationOfInternalStateViaGetters PASSED

org.apache.kafka.streams.state.StreamsMetadataTest > shouldNotBeEqualIfDifferInStandByTopicPartitions PASSED

org.apache.kafka.streams.state.StreamsMetadataTest > shouldNotBeEqualIfDifferInHostInfo PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIPersistentSessionStoreRetentionPeriodIsNegative PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIPersistentTimestampedWindowStoreIfWindowSizeIsNegative PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldSerializeNew PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldSerializeOld PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldStoreDifferentValues PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldCompactDuplicates PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldAccountForDeduplicationInSizeEstimate PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldDeduplicateNullValues PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldDeduplicateIndenticalValues PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldDeduplicateEqualValues PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldDeserializeCompactedDuplicates PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldDeserializeNew PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldDeserializeOld PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldStoreDifferentValuesWithPriorNull PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldSerializeNulls PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldSerializePrior PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldStoreDifferentValuesWithOldNull PASSED

org.apache.kafka.streams.state.internals.BufferValueTest > shouldDeserializePrior PASSED

org.apache.kafka.streams.state.StoresTest > shouldCreateInMemoryKeyValueStore PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldWriteAllKeyValueToInnerStoreOnPutAll PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldWriteToChangelogOnPutIfAbsentWhenNoPreviousValue PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldWriteToInnerOnPutIfAbsentNoPreviousValue PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldWriteKeyValueBytesToInnerStoreOnPut PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldPropagateDelete PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldReturnCurrentValueOnPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldLogChangesOnPutAll PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldNotWriteToChangeLogOnPutIfAbsentWhenValueForKeyExists PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldReturnNullOnPutIfAbsentWhenNoPreviousValue PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldLogKeyNullOnDelete PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldReturnNullOnGetWhenDoesntExist PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldReturnOldValueOnDelete PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldNotWriteToInnerOnPutIfAbsentWhenValueForKeyExists PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildTimestampedKeyValueStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldCreateRocksDbTimestampedStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIPersistentWindowStoreIfWindowSizeIsNegative PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFetchKeyRangeAcrossStoresWithNullKeyTo PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildTimestampedWindowStoreThatWrapsInMemoryWindowStore PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowNoSuchElementExceptionWhileNextForPrefixScan PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > emptyIteratorPeekNextKeyShouldThrowNoSuchElementException PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > emptyIteratorAlwaysReturnsFalse PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldBackwardFetchKeyRangeAcrossStoresWithNullKeyTo PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldBackwardFetchKeyRangeAcrossStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldNotGetValuesFromOtherStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFindValueForKeyWhenMultiStoresBackwards PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldThrowInvalidStateStoreExceptionIfBackwardFetchThrows PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFetchKeyRangeAcrossStoresWithNullKeyFrom PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > emptyBackwardIteratorAlwaysReturnsFalse PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldReturnEmptyIteratorIfNoData PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldThrowInvalidStateStoreExceptionIfFetchThrows PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > emptyIteratorNextShouldThrowNoSuchElementException PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldGetBackwardAllAcrossStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > emptyBackwardIteratorPeekNextKeyShouldThrowNoSuchElementException PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFetchAllAcrossStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > emptyBackwardIteratorNextShouldThrowNoSuchElementException PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldBackwardFetchKeyRangeAcrossStoresWithNullKeyFromKeyTo PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFindValueForKeyWhenMultiStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldBackwardFetchAllAcrossStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldThrowNPEIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFetchKeyValueAcrossStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldBackwardFetchValuesFromWindowStore PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldThrowInvalidStateStoreExceptionOnRebalance PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFetchKeyRangeAcrossStores PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildWindowStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldCreateRocksDbTimestampedWindowStore PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnValueIfExists PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildTimestampedKeyValueStoreThatWrapsInMemoryKeyValueStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldCreateRocksDbSessionStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIMemoryKeyValueStoreStoreNameIsNull PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildKeyValueStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIPersistentTimestampedWindowStoreStoreNameIsNull PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildSessionStore PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnLongMaxValueOnUnderflow PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildTimestampedKeyValueStoreThatWrapsKeyValueStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfSupplierIsNullForWindowStoreBuilder PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfSupplierIsNullForSessionStoreBuilder PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowNullPointerExceptionOnPrefixScanNullPrefix PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfILruMapStoreCapacityIsNegative PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfSupplierIsNullForKeyValueStoreBuilder PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFetchKeyRangeAcrossStoresWithNullKeyFromKeyTo PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldReturnBackwardEmptyIteratorIfNoData PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldNotGetValuesBackwardFromOtherStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldBackwardFetchKeyRangeAcrossStoresWithNullKeyFrom PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldGetAllAcrossStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldThrowInvalidStateStoreExceptionOnRebalanceWhenBackwards PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyWindowStoreTest > shouldFetchValuesFromWindowStore PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldNotGetValuesFromOtherStores PASSED

org.apache.kafka.streams.state.StoresTest > shouldCreateMemoryNavigableCache PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIPersistentTimestampedWindowStoreRetentionPeriodIsNegative PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIPersistentWindowStoreRetentionPeriodIsNegative PASSED

org.apache.kafka.streams.state.StoresTest > shouldCreateRocksDbStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfPersistentTimestampedKeyValueStoreStoreNameIsNull PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowUnsupportedOperationExceptionWhileRange PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildTimestampedWindowStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIPersistentWindowStoreStoreNameIsNull PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfPersistentKeyValueStoreStoreNameIsNull PASSED

org.apache.kafka.streams.state.StoresTest > shouldCreateRocksDbWindowStore PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfILruMapStoreNameIsNull PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnValueOnRangeNullFromKey PASSED

org.apache.kafka.streams.state.StoresTest > shouldThrowIfIPersistentSessionStoreStoreNameIsNull PASSED

org.apache.kafka.streams.state.StoresTest > shouldBuildTimestampedWindowStoreThatWrapsWindowStore PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldGetApproximateEntriesAcrossAllStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnValueOnReverseRangeNullFromKey PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldSupportPrefixScan PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnLongMaxValueOnOverflow PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowInvalidStoreExceptionOnApproximateNumEntriesDuringRebalance PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldSupportReverseAllAcrossMultipleStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowInvalidStoreExceptionOnPrefixScanDuringRebalance PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowNoSuchElementExceptionWhilePeekNext PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldSupportPrefixScanAcrossMultipleKVStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowUnsupportedOperationExceptionWhileReverseRange PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowInvalidStoreExceptionDuringRebalance PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowUnsupportedOperationExceptionWhilePrefixScan PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowInvalidStoreExceptionOnAllDuringRebalance PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldSupportRange PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldSupportReverseRangeAcrossMultipleKVStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnNullIfKeyDoesNotExist PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowNoSuchElementExceptionWhileNext PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedWindowBytesStoreTest > shouldLogPutsWithPosition PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldFindValueForKeyWhenMultiStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowInvalidStoreExceptionOnReverseRangeDuringRebalance PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnValueOnReverseRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedWindowBytesStoreTest > shouldDelegateToUnderlyingStoreWhenFetchingRange PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowInvalidStoreExceptionOnRangeDuringRebalance PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedWindowBytesStoreTest > shouldLogPuts PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowNullPointerExceptionOnPrefixScanNullPrefixKeySerializer PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedWindowBytesStoreTest > shouldRetainDuplicatesWhenSet PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedWindowBytesStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedWindowBytesStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedWindowBytesStoreTest > shouldDelegateToUnderlyingStoreWhenFetching PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingTimestampedKeyValueBytesStoreTest > shouldReturnValueOnGetWhenExists PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowNullPointerExceptionOnGetNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryTimeOrderedKeyValueBufferTest > bufferShouldAllowLoggingEnablement PASSED

org.apache.kafka.streams.state.internals.InMemoryTimeOrderedKeyValueBufferTest > bufferShouldAllowCacheEnablement PASSED

org.apache.kafka.streams.state.internals.InMemoryTimeOrderedKeyValueBufferTest > bufferShouldAllowCacheDisablement PASSED

org.apache.kafka.streams.state.internals.InMemoryTimeOrderedKeyValueBufferTest > bufferShouldAllowLoggingDisablement PASSED

org.apache.kafka.streams.state.internals.BlockBasedTableConfigWithAccessibleCacheTest > shouldReturnNoBlockCacheIfNoneIsSet PASSED

org.apache.kafka.streams.state.internals.BlockBasedTableConfigWithAccessibleCacheTest > shouldSetBlockCacheAndMakeItAccessible PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowUnsupportedOperationExceptionWhileRemove PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldSupportReverseRange PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldSupportRangeAcrossMultipleKVStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldReturnValueOnRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowNoSuchElementExceptionWhilePeekNextForPrefixScan PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldThrowInvalidStoreExceptionOnReverseAllDuringRebalance PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldFetchKeyRangeAcrossStoresWithNullKeyTo PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldNotGetValueFromOtherStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldFetchKeyRangeAcrossStoresWithNullKeyFrom PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlyKeyValueStoreTest > shouldSupportAllAcrossMultipleStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldReturnEmptyIteratorIfNoData PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldThrowInvalidStateStoreExceptionIfSessionFetchThrows PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldFindValueForKeyWhenMultiStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldThrowNPEIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldMatchPositionAfterPut PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldThrowNullPointerExceptionIfFetchingNullKey PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldFetchResulstFromUnderlyingSessionStore PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldThrowInvalidStateStoreExceptionOnRebalance PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldFetchKeyRangeAcrossStores PASSED

org.apache.kafka.streams.state.internals.CompositeReadOnlySessionStoreTest > shouldFetchKeyRangeAcrossStoresWithNullKeyFromKeyTo PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldRemoveExpired PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldNotExpireFromOpenIterator PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromReverseCache[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldFetchExactKeys PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromReverseStore[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldReverseIterateBothStoreAndCache[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromReverseCache[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldBackwardFindValuesWithinMergingSessionWindowRange PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromReverseStore[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromCache[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromStore[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromCache[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromStore[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromReverseCache[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldFetchExactSession PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromReverseStore[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldBackwardFetchAllSessionsWithSameRecordKey PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldIterateBothStoreAndCache[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromCache[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > testIteratorPeekBackward PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromStore[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldRemove PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldFindValuesWithinMergingSessionWindowRange PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldThrowNullPointerExceptionOnRemoveNullKey PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromReverseCache[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldCloseOpenIteratorsWhenStoreIsClosedAndNotThrowInvalidStateStoreExceptionOnHasNext PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromReverseStore[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldReverseIterateBothStoreAndCache[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromReverseCache[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromReverseStore[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldFetchAllSessionsWithinKeyRange PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromCache[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromStore[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldReturnNullOnSessionNotFound PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromCache[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromStore[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromReverseCache[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromReverseStore[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldIterateBothStoreAndCache[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.KeyValueIteratorFacadeTest > shouldReturnPlainKeyValuePairOnGet PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromCache[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromStore[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.KeyValueIteratorFacadeTest > shouldForwardPeekNextKey PASSED

org.apache.kafka.streams.state.internals.KeyValueIteratorFacadeTest > shouldCloseInnerIterator PASSED

org.apache.kafka.streams.state.internals.KeyValueIteratorFacadeTest > shouldForwardHasNext PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromReverseCache[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromReverseStore[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldReverseIterateBothStoreAndCache[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromReverseCache[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromReverseStore[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromCache[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldHaveNextFromStore[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromCache[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldPeekNextKeyFromStore[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromReverseCache[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromReverseStore[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldIterateBothStoreAndCache[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromCache[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreKeyValueIteratorTest > shouldGetNextFromStore[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldLogPutsWithPosition PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldDelegateToUnderlyingStoreWhenFetchingRange PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldLogPuts PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldDelegateToUnderlyingStoreWhenBackwardFetchingRange PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldLogAndMeasureExpiredRecords PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldRetainDuplicatesWhenSet PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldDelegateToUnderlyingStoreWhenBackwardFetching PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldNotThrowExceptionRemovingNonexistentKey PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingWindowBytesStoreTest > shouldDelegateToUnderlyingStoreWhenFetching PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldPutAndBackwardFindSessionsInRange PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldFetchAllSessionsWithSameRecordKey PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldBackwardFetchExactKeys PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldBackwardFetchAllSessionsWithinKeyRange PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldFindSessionsToMerge PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldBackwardFindSessionsToMerge PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldReturnSameResultsForSingleKeyFindSessionsAndEqualKeyRangeFindSessions PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldNotSetFlushListenerOnWrappedNoneCachingStore PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldRecordRestoreTimeOnInit PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldBackwardFindSessionsFromStoreAndRecordFetchMetric PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnFindSessionsRangeIfToIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnFindSessionsRangeIfFromIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnPutIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldFetchRangeFromStoreAndRecordFetchMetric PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldFindSessionsFromStoreAndRecordFetchMetric PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldBackwardFindSessionRangeFromStoreAndRecordFetchMetric PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldFindSessionRangeFromStoreAndRecordFetchMetric PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnBackwardFindSessionsIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentTest > shouldCompareSegmentIdOnly PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldRemoveMetricsOnClose PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldBackwardFetchRangeFromStoreAndRecordFetchMetric PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentTest > shouldBeEqualIfIdIsEqual PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldFetchForKeyAndRecordFetchMetric PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnBackwardFindSessionsRangeIfFromIsNull PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldRestore PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldThrowNullPointerExceptionOnFindSessionsNullKey PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldBackwardFetchAndIterateOverExactBinaryKeys PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > testIteratorPeek PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldRemoveOnNullAggValue PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldPutAndFindSessionsInRange PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey PASSED

org.apache.kafka.streams.state.internals.InMemorySessionStoreTest > shouldFetchAndIterateOverExactBinaryKeys PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextCacheKeyReverse[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldIterateOverValueFromBothIterators[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextCacheKey[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldReverseIterateOverValueFromBothIterators[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextStoreKey[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextStoreKeyReverse[WINDOW_KEY_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextCacheKeyReverse[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldIterateOverValueFromBothIterators[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextCacheKey[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldReverseIterateOverValueFromBothIterators[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextStoreKey[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextStoreKeyReverse[KEY_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextCacheKeyReverse[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldIterateOverValueFromBothIterators[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextCacheKey[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldReverseIterateOverValueFromBothIterators[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextStoreKey[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedWindowStoreIteratorTest > shouldPeekNextStoreKeyReverse[TIME_FIRST_SCHEMA] PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldMatchPositionAfterPut PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldBackwardFetchForKeyAndRecordFetchMetric PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnRemoveIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnBackwardFetchIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnFetchRangeIfToIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldNotThrowNullPointerExceptionIfFetchSessionReturnsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldRemoveFromStoreAndRecordRemoveMetric PASSED

org.apache.kafka.streams.state.internals.RecordConvertersTest > shouldPreserveNullValueOnConversion PASSED

org.apache.kafka.streams.state.internals.RecordConvertersTest > shouldAddTimestampToValueOnConversionWhenValueIsNotNull PASSED

org.apache.kafka.streams.state.internals.SegmentedCacheFunctionTest > cacheKey PASSED

org.apache.kafka.streams.state.internals.SegmentedCacheFunctionTest > key PASSED

org.apache.kafka.streams.state.internals.SegmentedCacheFunctionTest > testRoundTripping PASSED

org.apache.kafka.streams.state.internals.SegmentedCacheFunctionTest > compareSegmentedKeys PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testExpiration PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentTest > shouldCompareSegmentIdOnly PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentTest > shouldBeEqualIfIdIsEqual PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldNotExpireFromOpenIterator PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldRestore PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testValueIteratorPeek PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testFetchDuplicates PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldGetAll PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldGetAllNonDeletedRecords PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldNotThrowConcurrentModificationException PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testBackwardFetchRange PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentTest > shouldDeleteStateDirectoryOnDestroy PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentTest > shouldHashOnSegmentIdOnly PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testPutAndFetchBefore PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldCloseOpenIteratorsWhenStoreIsClosedAndNotThrowInvalidStateStoreExceptionOnHasNext PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testFetchRange PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > testMetrics PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldLogAndMeasureExpiredRecords PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldPassDefaultChangelogTopicNameToStateStoreSerdeIfLoggingDisabled PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnBackwardFetchIfFromIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnBackwardFetchIfToIsNull PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldEarlyClosedIteratorStillGetAllRecords PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldSetFlushListenerOnWrappedCachingStore PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldRemoveMetricsEvenIfWrappedStoreThrowsOnClose PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldReturnNullOnWindowNotFound PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnBackwardFindSessionsRangeIfToIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnFetchRangeIfFromIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnRemoveIfWindowIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnPutIfWrappedKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnFetchSessionIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnRemoveIfWrappedKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnFetchIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldWriteBytesToInnerStoreAndRecordPutMetric PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnFindSessionsIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldPassChangelogTopicNameToStateStoreSerde PASSED

org.apache.kafka.streams.state.internals.MeteredSessionStoreTest > shouldThrowNullPointerOnPutIfWindowIsNull PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldFetchAndIterateOverExactKeys PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldNotSetFlushListenerOnWrappedNoneCachingStore PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testWindowIteratorPeek PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetPunctuateSensor PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetCommitOverTasksSensor PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldPutIfAbsentAndRecordPutIfAbsentMetric PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldPutAllToInnerStoreAndRecordPutAllMetric PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldGetAllFromInnerStoreAndRecordAllMetric PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldFlushInnerWhenFlushTimeRecords PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldGetWithBinary PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldGetBackwardAll PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldGetBytesFromInnerStoreAndReturnGetMetric PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldPutIfOutOfOrder PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testDeleteAndUpdate PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldGetAllReturnTimestampOrderedRecords PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldNotThrowExceptionWhenFetchRangeIsExpired PASSED

org.apache.kafka.streams.processor.internals.metrics.TopicMetricsTest > shouldGetRecordsAndBytesProducedSensor PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldThrowNullPointerExceptionOnGetNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testPutSameKeyTimestamp PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldFetchAllInTimeRange PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldBackwardFetchAllInTimeRange PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldAddTotalBlockedTimeMetric PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testPutAndFetchAfter PASSED

org.apache.kafka.streams.processor.internals.metrics.TopicMetricsTest > shouldGetRecordsAndBytesConsumedSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetProcessRecordsSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetCreateTaskSensor PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldFetchAndIterateOverExactBinaryKeys PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetCommitSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetProcessLatencySensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetPollRecordsSensor PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldAddThreadStartTimeMetric PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetCommitRatioSensor PASSED

org.apache.kafka.streams.state.internals.InMemoryWindowStoreTest > testRangeAndSinglePointFetch PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetProcessRatioSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetCloseTaskSensor PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldNotSetFlushListenerOnWrappedNoneCachingStore PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnPutAllIfAnyKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnDeleteIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnReverseRangeIfToIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnRangeIfFromIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnPutIfAbsentIfKeyIsNull PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetProcessRateSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetPunctuateRatioSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetPollSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetPollRatioSensor PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldPutIfAbsentAndRecordPutIfAbsentMetric PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnPutIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldPutAllToInnerStoreAndRecordPutAllMetric PASSED

org.apache.kafka.streams.processor.internals.metrics.ThreadMetricsTest > shouldGetSkipRecordSensor PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldGetAllFromInnerStoreAndRecordAllMetric PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldFlushInnerWhenFlushTimeRecords PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnReverseRangeIfFromIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnGetIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldRemoveMetricsOnClose PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldGetBytesFromInnerStoreAndReturnGetMetric PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldGetRecordsWithPrefixKey PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > testMetrics PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldGetRangeFromInnerStoreAndRecordRangeMetric PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldNotThrowExceptionIfSerdesCorrectlySetFromProcessorContext PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldPassDefaultChangelogTopicNameToStateStoreSerdeIfLoggingDisabled PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldSetFlushListenerOnWrappedCachingStore PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldNotThrowExceptionIfSerdesCorrectlySetFromConstructorParameters PASSED

org.apache.kafka.streams.processor.internals.metrics.ProcessorNodeMetricsTest > shouldGetIdempotentUpdateSkipSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ProcessorNodeMetricsTest > shouldGetProcessAtSourceSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetNewThreadLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetExistingThreadLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetNewTaskLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetExistingTaskLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetNewTopicLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetExistingTopicLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ProcessorNodeMetricsTest > shouldGetForwardSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.ProcessorNodeMetricsTest > shouldGetSuppressionEmitSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetNewStoreLevelSensorIfNoneExists PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetExistingStoreLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldUseSameStoreLevelSensorKeyWithTwoDifferentSensorNames PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldNotUseSameStoreLevelSensorKeyWithDifferentTaskIds PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldNotUseSameStoreLevelSensorKeyWithDifferentStoreNames PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldGetSegmentsWithinTimeBackwardRangeOutOfOrder PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldNotUseSameStoreLevelSensorKeyWithDifferentThreadIds PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldUseSameStoreLevelSensorKeyWithSameSensorNames PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > testMetrics PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldGetRangeFromInnerStoreAndRecordRangeMetric PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldRecordRestoreLatencyOnInit PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldPassDefaultChangelogTopicNameToStateStoreSerdeIfLoggingDisabled PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnRangeIfToIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldSetFlushListenerOnWrappedCachingStore PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldThrowNullPointerOnPrefixScanIfPrefixIsNull PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddNewStoreLevelMutableMetric PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldRemoveMetricsEvenIfWrappedStoreThrowsOnClose PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldNotAddStoreLevelMutableMetricIfAlreadyExists PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapterTest > shouldForwardAllDbOptionsCalls PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldWriteBytesToInnerStoreAndRecordPutMetric PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldNotThrowNullPointerExceptionIfGetReturnsNull PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldPassChangelogTopicNameToStateStoreSerde PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldRemoveStateStoreLevelSensors PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetNewNodeLevelSensor PASSED

org.apache.kafka.streams.state.internals.MeteredKeyValueStoreTest > shouldDeleteFromInnerStoreAndRecordDeleteMetric PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetExistingNodeLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetNewCacheLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetExistingCacheLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetNewClientLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetExistingClientLevelSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddClientLevelImmutableMetric PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddClientLevelMutableMetric PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldProvideCorrectStrings PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldRemoveClientLevelMetricsAndSensors PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldNotPutIfSameValuesAndGreaterTimestamp PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldWriteBytesToInnerStoreAndRecordPutMetric PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldPassChangelogTopicNameToStateStoreSerde PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnAllKeysInPartiallyOverlappingRangeInReverseDirection PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedKeyValueStoreTest > shouldDeleteFromInnerStoreAndRecordDeleteMetric PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnNoKeysWhenLastKeyIsSmallerThanSmallestKeyInStateStoreForwardDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnAllKeysInPartiallyOverlappingRangeInForwardDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnAllKeysInTheRangeInForwardDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnAllKeysWhenLastKeyIsGreaterThanLargestKeyInStateStoreInForwardDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnNoKeysWhenLastKeyIsLargerThanLargestKeyInStateStoreReverseDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnTheCurrentKeyOnInvokingPeekNextKeyInReverseDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnAllKeysInTheRangeReverseDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldCloseIterator PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnTheCurrentKeyOnInvokingPeekNextKeyInForwardDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldReturnAllKeysWhenLastKeyIsSmallerThanSmallestKeyInStateStoreInReverseDirection PASSED

org.apache.kafka.streams.state.internals.RocksDBRangeIteratorTest > shouldExcludeEndOfRange PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldRemoveThreadLevelSensors PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > testNullMetrics PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > testRemoveNullSensor PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldHaveCachingStoreWhenEnabled PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldHaveChangeLoggingStoreByDefault PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldHaveMeteredStoreAsOuterStore PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldThrowNullPointerIfTimeIsNull PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldHaveCachingAndChangeLoggingWhenBothEnabled PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldNotHaveChangeLoggingStoreWhenDisabled PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldThrowNullPointerIfInnerIsNull PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldThrowNullPointerIfKeySerdeIsNull PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldHaveChangeLoggingStoreWhenLoggingEnabled PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldThrowNullPointerIfMetricsScopeIsNull PASSED

org.apache.kafka.streams.state.internals.SessionStoreBuilderTest > shouldThrowNullPointerIfValueSerdeIsNull PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > testRemoveSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > testMultiLevelSensorRemoval PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > testLatencyMetrics PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > testThroughputMetrics PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldFlushUnderlyingStore PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldLogPutsWithPosition PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldCloseUnderlyingStore PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateToUnderlyingStoreWhenFetchingRange PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldLogPuts PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateToUnderlyingStoreWhenBackwardFetchingRange PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateToUnderlyingStoreWhenFindingSessions PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateToUnderlyingStoreWhenFindingSessionRange PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateToUnderlyingStoreWhenBackwardFetching PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldLogRemoves PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateToUnderlyingStoreWhenBackwardFindingSessions PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > testTotalMetricDoesntDecrease PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateToUnderlyingStoreWhenFetching PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveCachingStoreWhenEnabled[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldNotWrapTimestampedByteStore[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveChangeLoggingStoreByDefault[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveMeteredStoreAsOuterStore[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingSessionBytesStoreTest > shouldDelegateToUnderlyingStoreWhenBackwardFindingSessionRange PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldWrapPlainKeyValueStoreAsTimestampStore[Timestamped Store] PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddLatencyRateTotalSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddRateTotalSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddLatencyRateTotalSensorWithCustomTags PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldDisableCachingWithRetainDuplicates[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfTimeIsNull[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveCachingAndChangeLoggingWhenBothEnabled[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldNotHaveChangeLoggingStoreWhenDisabled[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfInnerIsNull[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfKeySerdeIsNull[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveChangeLoggingStoreWhenLoggingEnabled[Timestamped Store] PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddRateTotalSensorWithCustomTags PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldThrowIfLatencyRateTotalSensorIsAddedWithOddTags PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldThrowIfRateTotalSensorIsAddedWithOddTags PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetClientLevelTagMap PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfMetricsScopeIsNull[Timestamped Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfValueSerdeIsNull[Timestamped Store] PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetStoreLevelTagMap PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetCacheLevelTagMap PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldGetThreadLevelTagMap PASSED

org.apache.kafka.streams.state.internals.RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapterTest > shouldForwardAllColumnFamilyCalls PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveCachingStoreWhenEnabled[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldNotWrapTimestampedByteStore[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveChangeLoggingStoreByDefault[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveMeteredStoreAsOuterStore[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldWrapPlainKeyValueStoreAsTimestampStore[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapterTest > shouldOverwriteAllOptionsMethods PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldDisableCachingWithRetainDuplicates[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfTimeIsNull[TimeOrdered Store] PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetEnforcedProcessingSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetDroppedRecordsSensor PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveCachingAndChangeLoggingWhenBothEnabled[TimeOrdered Store] PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetPunctuateSensor PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldNotHaveChangeLoggingStoreWhenDisabled[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfInnerIsNull[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfKeySerdeIsNull[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldHaveChangeLoggingStoreWhenLoggingEnabled[TimeOrdered Store] PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfMetricsScopeIsNull[TimeOrdered Store] PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetTotalBytesSensor PASSED

org.apache.kafka.streams.state.internals.TimestampedWindowStoreBuilderTest > shouldThrowNullPointerIfValueSerdeIsNull[TimeOrdered Store] PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddInvocationRateToSensor PASSED

org.apache.kafka.streams.state.internals.RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapterTest > shouldLogWarningWhenSettingWalOptions PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddAmountRateAndSum PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetRecordLatenessSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddSum PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetActiveBufferCountSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetCommitSensor PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldPutFetchAllKeysFromCache PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddAmountRate PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetProcessLatencySensor PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetActiveProcessRatioSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddValue PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddTotalCountAndSumMetricsToSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddAvgAndTotalMetricsToSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddAvgAndMinAndMaxMetricsToSensor PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldThrowIfTryingToFindMergeSessionFromClosedCachingStore PASSED

org.apache.kafka.streams.processor.internals.metrics.TaskMetricsTest > shouldGetTotalCacheSizeInBytesSensor PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddMinAndMaxMetricsToSensor PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldWriteAllKeyValueToInnerStoreOnPutAll PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldReturnMetricsVersionCurrent PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldPutFetchFromCache PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldConvertToBinaryAndBack[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithLargeTimestamps[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractStartTimeFromBinary[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithZeroTimestamp[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldDeSerializeNullToNull[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldSerializeDeserialize[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testLowerBoundMatchesTrailingZeros[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithKeyBytesLargerThanFirstTimestampByte[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchAllKeysUsingNullKeys[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldDeSerializeEmtpyByteArrayToNull[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchExactKeySkippingShorterKeys[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractWindowFromBindary[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractKeyFromBinary[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldWriteToChangelogOnPutIfAbsentWhenNoPreviousValue PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldMeasureLatency PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldNotMeasureLatencyDueToRecordingLevel PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldNotMeasureLatencyBecauseSensorHasNoMetrics PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddThreadLevelMutableMetric PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldCleanupThreadLevelMutableMetric PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldAddThreadLevelImmutableMetric PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchExactKeysSkippingLongerKeys[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldWriteToInnerOnPutIfAbsentNoPreviousValue PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractKeyBytesFromBinary[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testLowerBoundWithZeroTimestamp[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractEndTimeFromBinary[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldSerializeNullToNull[SessionKeySchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractBytesKeyFromBinary[SessionKeySchema] PASSED

org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImplTest > shouldCleanupThreadLevelImmutableMetric PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldConvertToBinaryAndBack[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithLargeTimestamps[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldWriteKeyValueBytesToInnerStoreOnPut PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractStartTimeFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithZeroTimestamp[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldDeSerializeNullToNull[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldSerializeDeserialize[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testLowerBoundMatchesTrailingZeros[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithKeyBytesLargerThanFirstTimestampByte[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchAllKeysUsingNullKeys[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldDeSerializeEmtpyByteArrayToNull[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchExactKeySkippingShorterKeys[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractWindowFromBindary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractKeyFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldForwardChangedValuesDuringFlush PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchExactKeysSkippingLongerKeys[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractKeyBytesFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testLowerBoundWithZeroTimestamp[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractEndTimeFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldSerializeNullToNull[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractBytesKeyFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldConvertToBinaryAndBack[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithLargeTimestamps[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractStartTimeFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithZeroTimestamp[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldDeSerializeNullToNull[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldSerializeDeserialize[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testLowerBoundMatchesTrailingZeros[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testUpperBoundWithKeyBytesLargerThanFirstTimestampByte[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchAllKeysUsingNullKeys[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldDeSerializeEmtpyByteArrayToNull[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchExactKeySkippingShorterKeys[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractWindowFromBindary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractKeyFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldFetchExactKeysSkippingLongerKeys[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractKeyBytesFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > testLowerBoundWithZeroTimestamp[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractEndTimeFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldSerializeNullToNull[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.SessionKeySchemaTest > shouldExtractBytesKeyFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldLogPositionOnPut PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldPropagateDelete PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldMatchPositionAfterPutWithFlushListener PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldReturnCurrentValueOnPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldNotWriteToChangeLogOnPutIfAbsentWhenValueForKeyExists PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldBackwardFetchAllSessionsWithSameRecordKey PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldReturnNullOnPutIfAbsentWhenNoPreviousValue PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldPutFetchRangeFromCache PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldLogKeyNullOnDelete PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldPutBackwardFetchAllKeysFromCache PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldGetRecordsWithPrefixKey PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldReturnNullOnGetWhenDoesntExist PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldReturnOldValueOnDelete PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldNotForwardChangedValuesDuringFlushWhenSendOldValuesDisabled PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldNotWriteToInnerOnPutIfAbsentWhenValueForKeyExists PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldRemove PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldFetchRangeCorrectlyAcrossSegments PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldMatchPositionAfterPutWithoutFlushListener PASSED

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldThrowIfTryingToPutIntoClosedCachingStore PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldPutAllKeyValuePairs failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldPutAllKeyValuePairs.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldPutAllKeyValuePairs FAILED
    java.lang.AssertionError: 
    Expected: <3L>
         but: was <0L>
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)
        at org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldPutAllKeyValuePairs(InMemoryLRUCacheStoreTest.java:59)

org.apache.kafka.streams.state.internals.ChangeLoggingKeyValueBytesStoreTest > shouldReturnValueOnGetWhenExists PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldThrowNullPointerExceptionOnRemoveNullKey PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testRestoreEvict failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testRestoreEvict.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testRestoreEvict FAILED
    java.lang.NullPointerException: stateRestoreCallback must not be null
        at java.base/java.util.Objects.requireNonNull(Objects.java:233)
        at org.apache.kafka.streams.processor.internals.StateRestoreCallbackAdapter.adapt(StateRestoreCallbackAdapter.java:33)
        at org.apache.kafka.test.InternalMockProcessorContext.restore(InternalMockProcessorContext.java:484)
        at org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testRestoreEvict(InMemoryLRUCacheStoreTest.java:156)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldFlushItemsToStoreOnEviction PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testEvict failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testEvict.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testEvict FAILED
    java.lang.AssertionError: expected:<10> but was:<0>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testEvict(InMemoryLRUCacheStoreTest.java:101)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldClearNamespaceCacheOnClose PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldUpdateValuesForExistingKeysOnPutAll failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldUpdateValuesForExistingKeysOnPutAll.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldUpdateValuesForExistingKeysOnPutAll FAILED
    java.lang.AssertionError: 
    Expected: <3L>
         but: was <0L>
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)
        at org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldUpdateValuesForExistingKeysOnPutAll(InMemoryLRUCacheStoreTest.java:81)

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotThrowNullPointerExceptionOnPutIfAbsentNullValue PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldFetchAllSessionsWithSameRecordKey PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldThrowNullPointerExceptionOnPutAllNullKey PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldPutAll failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldPutAll.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldPutAll FAILED
    java.lang.AssertionError: 
    Expected: <[KeyValue(1, one), KeyValue(2, two)]>
         but: was <[]>
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldPutAll(AbstractKeyValueStoreTest.java:508)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldNotThrowConcurrentModificationException failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldNotThrowConcurrentModificationException.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotThrowConcurrentModificationException FAILED
    java.util.NoSuchElementException
        at org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIterator.next(DelegatingPeekingKeyValueIterator.java:74)
        at org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIterator.next(DelegatingPeekingKeyValueIterator.java:28)
        at org.apache.kafka.streams.state.internals.MeteredKeyValueStore$MeteredKeyValueIterator.next(MeteredKeyValueStore.java:472)
        at org.apache.kafka.streams.state.internals.MeteredKeyValueStore$MeteredKeyValueIterator.next(MeteredKeyValueStore.java:452)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldNotThrowConcurrentModificationException(AbstractKeyValueStoreTest.java:576)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnRangeKeyToNull failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnRangeKeyToNull.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldReturnValueOnRangeKeyToNull FAILED
    java.lang.AssertionError: expected:<[KeyValue(1, one), KeyValue(2, two)]> but was:<[]>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldReturnValueOnRangeKeyToNull(AbstractKeyValueStoreTest.java:413)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldMatchPositionAfterPut PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldCloseCacheAfterErrorDuringWrappedStoreClose PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testSize failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testSize.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testSize FAILED
    java.lang.AssertionError: expected:<5> but was:<0>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.testSize(AbstractKeyValueStoreTest.java:489)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldMatchPositionAfterPut[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldCloseWrappedStoreAfterErrorDuringCacheClose PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testPutGetReverseRange failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testPutGetReverseRange.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testPutGetReverseRange FAILED
    java.lang.AssertionError: expected:<5> but was:<0>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.testPutGetReverseRange(AbstractKeyValueStoreTest.java:203)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldReturnSameResultsForSingleKeyFindSessionsBackwardsAndEqualKeyRangeFindSessions PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnNoKeys PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotThrowInvalidRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentTest > shouldDeleteStateDirectoryOnDestroy PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentTest > shouldHashOnSegmentIdOnly PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldNotIncludeDeletedFromRangeResult failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldNotIncludeDeletedFromRangeResult.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotIncludeDeletedFromRangeResult FAILED
    java.lang.AssertionError: expected:<{2=two}> but was:<{}>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldNotIncludeDeletedFromRangeResult(AbstractKeyValueStoreTest.java:115)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldThrowIfTryingToFetchFromClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldSetFlushListener PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldDeleteFromStore PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldThrowNullPointerIfPrefixKeySerializerIsNull PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldDeleteIfSerializedValueIsNull failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldDeleteIfSerializedValueIsNull.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldDeleteIfSerializedValueIsNull FAILED
    java.lang.AssertionError: expected:<{2=two}> but was:<{}>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldDeleteIfSerializedValueIsNull(AbstractKeyValueStoreTest.java:144)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldCloseWrappedStoreAndCacheAfterErrorDuringCacheFlush PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > futureEventsShouldNotCauseSegmentRoll PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldPutBackwardFetchRangeFromCache PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testPutGetWithDefaultSerdes failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testPutGetWithDefaultSerdes.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testPutGetWithDefaultSerdes FAILED
    java.lang.AssertionError: expected:<5> but was:<0>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.testPutGetWithDefaultSerdes(AbstractKeyValueStoreTest.java:251)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldThrowNullPointerExceptionOnPutIfAbsentNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldRemoveKeysWithNullValues PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldReturnSameResultsForSingleKeyFindSessionsAndEqualKeyRangeFindSessions PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldQueryItemsInCacheAndStore PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testPutIfAbsent failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testPutIfAbsent.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testPutIfAbsent FAILED
    java.lang.AssertionError: expected:<four> but was:<null>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.testPutIfAbsent(AbstractKeyValueStoreTest.java:326)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldThrowNullPointerExceptionOnFindSessionsNullKey PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testRestoreWithDefaultSerdes failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testRestoreWithDefaultSerdes.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testRestoreWithDefaultSerdes FAILED
    java.lang.NullPointerException: stateRestoreCallback must not be null
        at java.base/java.util.Objects.requireNonNull(Objects.java:233)
        at org.apache.kafka.streams.processor.internals.StateRestoreCallbackAdapter.adapt(StateRestoreCallbackAdapter.java:33)
        at org.apache.kafka.test.InternalMockProcessorContext.restore(InternalMockProcessorContext.java:484)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.testRestoreWithDefaultSerdes(AbstractKeyValueStoreTest.java:311)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldThrowIfTryingToRemoveFromClosedCachingStore PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnReverseRangeNullToNull failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnReverseRangeNullToNull.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldReturnValueOnReverseRangeNullToNull FAILED
    java.lang.AssertionError: expected:<[KeyValue(2, two), KeyValue(1, one), KeyValue(0, zero)]> but was:<[]>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldReturnValueOnReverseRangeNullToNull(AbstractKeyValueStoreTest.java:475)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnUUIDsWithStringPrefix PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldBackwardFetchRangeCorrectlyAcrossSegments PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys FAILED
    java.util.NoSuchElementException
        at org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIterator.next(DelegatingPeekingKeyValueIterator.java:74)
        at org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIterator.next(DelegatingPeekingKeyValueIterator.java:28)
        at org.apache.kafka.streams.state.internals.MeteredKeyValueStore$MeteredKeyValueIterator.next(MeteredKeyValueStore.java:472)
        at org.apache.kafka.streams.state.internals.MeteredKeyValueStore$MeteredKeyValueIterator.next(MeteredKeyValueStore.java:452)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys(AbstractKeyValueStoreTest.java:564)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldDelegateDeprecatedInit PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testRestore failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testRestore.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testRestore FAILED
    java.lang.NullPointerException: stateRestoreCallback must not be null
        at java.base/java.util.Objects.requireNonNull(Objects.java:233)
        at org.apache.kafka.streams.processor.internals.StateRestoreCallbackAdapter.adapt(StateRestoreCallbackAdapter.java:33)
        at org.apache.kafka.test.InternalMockProcessorContext.restore(InternalMockProcessorContext.java:484)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.testRestore(AbstractKeyValueStoreTest.java:289)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldDelegateInit PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnReverseRangeNullToKey failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnReverseRangeNullToKey.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldReturnValueOnReverseRangeNullToKey FAILED
    java.lang.AssertionError: expected:<[KeyValue(1, one), KeyValue(0, zero)]> but was:<[]>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldReturnValueOnReverseRangeNullToKey(AbstractKeyValueStoreTest.java:444)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldFetchCorrectlyAcrossSegments PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldPutReverseAll failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldPutReverseAll.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldPutReverseAll FAILED
    java.lang.AssertionError: 
    Expected: <[KeyValue(2, two), KeyValue(1, one)]>
         but: was <[]>
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldPutReverseAll(AbstractKeyValueStoreTest.java:527)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.CachingInMemorySessionStoreTest > shouldBackwardFetchCorrectlyAcrossSegments PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnKeysWithGivenPrefix PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldNotThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.FilteredCacheIteratorTest > shouldNotHaveNextIfHasNextConditionNotMet PASSED

org.apache.kafka.streams.state.internals.FilteredCacheIteratorTest > shouldThrowUnsupportedOperationExeceptionOnRemove PASSED

org.apache.kafka.streams.state.internals.FilteredCacheIteratorTest > shouldPeekNext PASSED

org.apache.kafka.streams.state.internals.FilteredCacheIteratorTest > shouldAllowEntryMatchingHasNextCondition PASSED

org.apache.kafka.streams.state.internals.FilteredCacheIteratorTest > shouldPeekNextKey PASSED

org.apache.kafka.streams.state.internals.FilteredCacheIteratorTest > shouldFilterEntriesNotMatchingHasNextCondition PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testPutGetRange failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.testPutGetRange.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > testPutGetRange FAILED
    java.lang.AssertionError: expected:<5> but was:<0>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.testPutGetRange(AbstractKeyValueStoreTest.java:155)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.LeftOrRightValueSerializerTest > shouldSerializeIntegerValue PASSED

org.apache.kafka.streams.state.internals.LeftOrRightValueSerializerTest > shouldThrowIfSerializeValueAsNull PASSED

org.apache.kafka.streams.state.internals.LeftOrRightValueSerializerTest > shouldThrowIfSerializeOtherValueAsNull PASSED

org.apache.kafka.streams.state.internals.LeftOrRightValueSerializerTest > shouldSerializeStringValue PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldNotThrowNullPointerWhenCacheIsEmptyAndEvictionCalled PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldEvictEldestEntry PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldBeReentrantAndNotBreakLRU PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldDeleteAndUpdateSize PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldPutAll PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldPutGet PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldNotThrowIllegalArgumentAfterEvictingDirtyRecordAndThenPuttingNewRecordWithSameKey PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldKeepTrackOfMostRecentlyAndLeastRecentlyUsed PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldRemoveDeletedValuesOnFlush PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldFlushDirtEntriesOnEviction PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldThrowIllegalStateExceptionWhenTryingToOverwriteDirtyEntryWithCleanEntry PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldReturnNullIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldOverwriteAll PASSED

org.apache.kafka.streams.state.internals.NamedCacheTest > shouldKeepTrackOfSize PASSED

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldThrowNullPointerExceptionOnGetNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotThrowNullPointerExceptionOnPutIfAbsentNullValue PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnRangeNullToNull failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnRangeNullToNull.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldReturnValueOnRangeNullToNull FAILED
    java.lang.AssertionError: expected:<[KeyValue(0, zero), KeyValue(1, one), KeyValue(2, two)]> but was:<[]>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldReturnValueOnRangeNullToNull(AbstractKeyValueStoreTest.java:429)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnRangeNullToKey failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnRangeNullToKey.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldReturnValueOnRangeNullToKey FAILED
    java.lang.AssertionError: expected:<[KeyValue(0, zero), KeyValue(1, one)]> but was:<[]>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldReturnValueOnRangeNullToKey(AbstractKeyValueStoreTest.java:398)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldThrowNullPointerExceptionOnDeleteNullKey PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnReverseRangeKeyToNull failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnValueOnReverseRangeKeyToNull.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldReturnValueOnReverseRangeKeyToNull FAILED
    java.lang.AssertionError: expected:<[KeyValue(2, two), KeyValue(1, one)]> but was:<[]>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldReturnValueOnReverseRangeKeyToNull(AbstractKeyValueStoreTest.java:459)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithFromLargerThanTo PASSED
org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnSameResultsForGetAndRangeWithEqualKeys failed, log available in /Users/sophie/Kafka/kafka/streams/build/reports/testOutput/org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest.shouldReturnSameResultsForGetAndRangeWithEqualKeys.test.stdout

org.apache.kafka.streams.state.internals.InMemoryLRUCacheStoreTest > shouldReturnSameResultsForGetAndRangeWithEqualKeys FAILED
    java.util.NoSuchElementException
        at org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIterator.next(DelegatingPeekingKeyValueIterator.java:74)
        at org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIterator.next(DelegatingPeekingKeyValueIterator.java:28)
        at org.apache.kafka.streams.state.internals.MeteredKeyValueStore$MeteredKeyValueIterator.next(MeteredKeyValueStore.java:472)
        at org.apache.kafka.streams.state.internals.MeteredKeyValueStore$MeteredKeyValueIterator.next(MeteredKeyValueStore.java:452)
        at org.apache.kafka.streams.state.internals.AbstractKeyValueStoreTest.shouldReturnSameResultsForGetAndRangeWithEqualKeys(AbstractKeyValueStoreTest.java:549)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldPeekNextKeyFromReverseCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldPeekNextKeyFromReverseStore PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldReverseIterateBothStoreAndCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldHaveNextFromReverseCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldHaveNextFromReverseStore PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldHaveNextFromCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldHaveNextFromStore PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldPeekNextKeyFromCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldPeekNextKeyFromStore PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldGetNextFromReverseCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldGetNextFromReverseStore PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldIterateBothStoreAndCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldGetNextFromCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheWrappedSessionStoreIteratorTest > shouldGetNextFromStore PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.ReadOnlyWindowStoreFacadeTest > shouldReturnPlainKeyValuePairsOnFetchAllLongParameters PASSED

org.apache.kafka.streams.state.internals.ReadOnlyWindowStoreFacadeTest > shouldReturnPlainKeyValuePairsOnSingleKeyFetch PASSED

org.apache.kafka.streams.state.internals.ReadOnlyWindowStoreFacadeTest > shouldReturnPlainKeyValuePairsOnRangeFetchLongParameters PASSED

org.apache.kafka.streams.state.internals.ReadOnlyWindowStoreFacadeTest > shouldReturnPlainKeyValuePairsOnSingleKeyFetchLongParameters PASSED

org.apache.kafka.streams.state.internals.ReadOnlyWindowStoreFacadeTest > shouldReturnPlainKeyValuePairsOnRangeFetchInstantParameters PASSED

org.apache.kafka.streams.state.internals.ReadOnlyWindowStoreFacadeTest > shouldReturnPlainKeyValuePairsOnFetchAllInstantParameters PASSED

org.apache.kafka.streams.state.internals.ReadOnlyWindowStoreFacadeTest > shouldReturnPlainKeyValuePairsOnSingleKeyFetchInstantParameters PASSED

org.apache.kafka.streams.state.internals.ReadOnlyWindowStoreFacadeTest > shouldReturnPlainKeyValuePairsOnAll PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldPutAll PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotThrowConcurrentModificationException PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnValueOnRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > testSize PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetMemtableMaxFlushTimeSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetBytesWrittenSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddEstimateNumKeysMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddCurSizeActiveMemTableMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetBytesWrittenDuringCompactionSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddBackgroundErrorsMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetBytesReadDuringCompactionSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddBlockCacheCapacityMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetCompactionTimeMaxSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetCompactionTimeAvgSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetBlockCacheFilterHitRatioSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetNumberOfFilesErrors PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddNumEntriesActiveMemTableMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetCompactionTimeMinSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetMemtableHitRatioSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddNumRunningFlushesMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddSizeAllMemTablesMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetMemtableAvgFlushTimeSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetNumberOfOpenFilesSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddNumberDeletesActiveTableMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddEstimatePendingCompactionBytesMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddBlockCachePinnedUsageMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddCurSizeAllMemTablesMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddCompactionPendingMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetBlockCacheDataHitRatioSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddMemTableFlushPendingMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddEstimateTableReadersMemMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddTotalSstFilesSizeMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddNumRunningCompactionsMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetBlockCacheIndexHitRatioSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddNumLiveVersionMetric PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetMemtableMinFlushTimeSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddNumImmutableMemTablesMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddNumDeletesImmutableMemTablesMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetMemtableBytesFlushedSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetWriteStallDurationSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldGetBytesReadSensor PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddLiveSstFilesSizeMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddBlockCacheUsageMetric PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsTest > shouldAddNumEntriesImmutableMemTablesMetric PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > testPutGetReverseRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldMatchPositionAfterPut[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemoveExpired[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotThrowInvalidRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotIncludeDeletedFromRangeResult PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldDeleteFromStore PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldDeleteIfSerializedValueIsNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > testPutGetWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutIfAbsentNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > testPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > testRestoreWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnValueOnReverseRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > testRestore PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnValueOnReverseRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldGetSegmentsWithinBackwardTimeRange PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldPutReverseAll PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldPutAndBackwardFetch[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchExactKeys[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldNotThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > testPutGetRange PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnGetNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnValueOnRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnValueOnRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnDeleteNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnValueOnReverseRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueStoreTest > shouldReturnSameResultsForGetAndRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFindValuesWithinMergingSessionWindowRange[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldNotHaveNextIfOnlyCacheItemsAndAllDeleted PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldNotHaveNextIfAllCachedItemsDeleted PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldIterateOverRange PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldIgnoreIfDeletedInCacheButExistsInStore PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldPeekNextKeyReverse PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldSkipAllDeletedFromCache PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldSkipLargerDeletedCacheValue PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldSkipSmallerDeletedCachedValue PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldPeekNextKey PASSED

org.apache.kafka.streams.state.internals.MergedSortedCacheKeyValueBytesStoreIteratorTest > shouldReverseIterateOverRange PASSED

org.apache.kafka.streams.state.internals.ReadOnlyKeyValueStoreFacadeTest > shouldReturnPlainKeyValuePairsForPrefixScan PASSED

org.apache.kafka.streams.state.internals.ReadOnlyKeyValueStoreFacadeTest > shouldReturnPlainValueOnGet PASSED

org.apache.kafka.streams.state.internals.ReadOnlyKeyValueStoreFacadeTest > shouldReturnPlainKeyValuePairsForRangeIterator PASSED

org.apache.kafka.streams.state.internals.ReadOnlyKeyValueStoreFacadeTest > shouldReturnPlainKeyValuePairsForAllIterator PASSED

org.apache.kafka.streams.state.internals.ReadOnlyKeyValueStoreFacadeTest > shouldForwardApproximateNumEntries PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDbIndexedTimeOrderedWindowBytesStoreSupplierTest > shouldCreateRocksDbTimeOrderedWindowStoreWithoutIndex PASSED

org.apache.kafka.streams.state.internals.RocksDbIndexedTimeOrderedWindowBytesStoreSupplierTest > shouldThrowIfWindowSizeIsLargerThanRetention PASSED

org.apache.kafka.streams.state.internals.RocksDbIndexedTimeOrderedWindowBytesStoreSupplierTest > shouldThrowIfWindowSizeIsNegative PASSED

org.apache.kafka.streams.state.internals.RocksDbIndexedTimeOrderedWindowBytesStoreSupplierTest > shouldThrowIfRetentionPeriodIsNegative PASSED

org.apache.kafka.streams.state.internals.RocksDbIndexedTimeOrderedWindowBytesStoreSupplierTest > shouldThrowIfStoreNameIsNull PASSED

org.apache.kafka.streams.state.internals.RocksDbIndexedTimeOrderedWindowBytesStoreSupplierTest > shouldCreateRocksDbTimeOrderedWindowStoreWithIndex PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyAndJoinSideSerializerTest > shouldSerializeKeyWithJoinSideAsTrue PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyAndJoinSideSerializerTest > shouldThrowIfSerializeNullData PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyAndJoinSideSerializerTest > shouldSerializeKeyWithJoinSideAsFalse PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchExactSession[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRemove[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutAllWithNullKey PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldCleanupSegmentsThatHaveExpired PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldUpdateSegmentFileNameFromOldDateFormatToNewFormat PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldBaseSegmentIntervalOnRetentionAndNumSegments PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAllSessionsWithSameRecordKey[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldHandleTombstoneRecords[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldMatchPositionAfterPutWithFlushListener PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldPutFetchAllKeysFromCache PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldThrowIfTryingToFindMergeSessionFromClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > testIteratorPeekBackward[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldIterateAllStoredItems PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldPutFetchFromCache PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyTo PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemove[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldPutAndFetch[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldGetRecordsWithPrefixKeyExcludingNextLargestKey PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > futureEventsShouldNotCauseSegmentRoll PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldPutFetchFromCache PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldDeleteItemsFromCache PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFindValuesWithinMergingSessionWindowRange[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnRemoveNullKey[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldForwardChangedValuesDuringFlush PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldGetSegmentsWithinTimeRangeOutOfOrder PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotForwardOldValuesWhenDisabled PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldGetAllSegments[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldCloseOpenIteratorsWhenStoreIsClosedAndNotThrowInvalidStateStoreExceptionOnHasNext[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldMatchPositionAfterPutWithFlushListener PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldPutAll PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldFetchAndIterateOverKeyBackwardRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAllSessionsWithinKeyRange[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldReturnNullOnSessionNotFound[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldMatchPositionAfterPutWithoutFlushListener PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldGetAllBackwardFromCache PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldFetchAllSegments[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldCloseAllOpenSegments PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldLogAndMeasureExpiredRecords[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldNotThrowExceptionRemovingNonexistentKey[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReverseIterateAllStoredItems PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldBackwardFetchAllSessionsWithSameRecordKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldMatchPositionAfterPutWithFlushListener PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldLogAndMeasureExpiredRecords[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldOnlyIterateOverSegmentsInBackwardRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldPutAndBackwardFindSessionsInRange[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToDoRangeQueryOnClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldPutFetchRangeFromCache PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFromKeyTo PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToDoGetApproxSizeOnClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAllSessionsWithSameRecordKey[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldCreateWriteBatches[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldPutBackwardFetchAllKeysFromCache PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldPutFetchRangeFromCache PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldMatchPositionAfterPut[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldThrowNoSuchElementOnNextIfNoNext PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldIterateOverRange PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldIterateBackwardCacheAndStoreKeyRange PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldNotForwardChangedValuesDuringFlushWhenSendOldValuesDisabled PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldNotThrowInvalidBackwardRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToDoReverseRangeQueryOnClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchExactKeys[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldGetSegmentsWithinTimeRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRestoreToByteStoreForActiveTask[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldGetSegmentsWithinBackwardTimeRange PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldOnlyIterateOverSegmentsInBackwardRangeWhenNullKeyTo PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToGetFromClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldRemove PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldIterateBackwardAcrossWindows PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAllSessionsWithinKeyRange[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldGetCorrectSegmentString PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldClearNamespaceCacheOnClose PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldNotCreateSegmentThatIsAlreadyExpired PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFindSessionsToMerge[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldPutAndBackwardFetch[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnUnderlying PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldOnlyIterateOverSegmentsInRangeWhenNullKeyTo PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldFetchAndIterateOverKeyRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFindSessionsToMerge[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToDeleteFromClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldMatchPositionAfterPutWithoutFlushListener PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldReturnSameResultsForSingleKeyFindSessionsAndEqualKeyRangeFindSessions[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldFetchRangeCorrectlyAcrossSegments PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleColonFormattedName[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldInitMetricsRecorder PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfMetricRecorderIsReInitialisedWithDifferentTask PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfMetricRecorderIsReInitialisedWithDifferentStreamsMetrics PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldSetStatsLevelToExceptDetailedTimersWhenValueProvidersWithStatisticsAreAdded PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldNotSetStatsLevelToExceptDetailedTimersWhenValueProvidersWithoutStatisticsAreAdded PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfValueProvidersForASegmentHasBeenAlreadyAdded PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfStatisticsToAddIsNotNullButExistingStatisticsAreNull PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfStatisticsToAddIsNullButExistingStatisticsAreNotNull PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfCacheToAddIsNullButExistingCacheIsNotNull PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfCacheToAddIsNotNullButExistingCacheIsNull PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfCacheToAddIsNotSameAsAllExistingCaches PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfCacheToAddIsSameAsOnlyOneOfMultipleCaches PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfDbToAddWasAlreadyAddedForOtherSegment PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldAddItselfToRecordingTriggerWhenFirstValueProvidersAreAddedToNewlyCreatedRecorder PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldAddItselfToRecordingTriggerWhenFirstValueProvidersAreAddedAfterLastValueProvidersWereRemoved PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldNotAddItselfToRecordingTriggerWhenNotEmpty2 PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldCloseStatisticsWhenValueProvidersAreRemoved PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldNotCloseStatisticsWhenValueProvidersWithoutStatisticsAreRemoved PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldRemoveItselfFromRecordingTriggerWhenLastValueProvidersAreRemoved PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToDoPutIfAbsentClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldThrowIfValueProvidersToRemoveNotFound PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldRecordStatisticsBasedMetrics PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldNotRecordStatisticsBasedMetricsIfStatisticsIsNull PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldCorrectlyHandleHitRatioRecordingsWithZeroHitsAndMisses PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderTest > shouldCorrectlyHandleAvgRecordingsWithZeroSumAndCount PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldCreateSegments PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldNotThrowExceptionOnHasNextWhenStoreClosed PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFrom PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldMatchPositionAfterPutWithoutFlushListener PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToDoAllQueryOnClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldThrowIfTryingToPutIntoClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldThrowNullPointerExceptionOnRemoveNullKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldCloseCacheAndWrappedStoreAfterErrorDuringCacheFlush PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldCleanupSegmentsThatHaveExpired PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRestore[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnFindSessionsNullKey[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRemove[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldUpdateSegmentFileNameFromOldDateFormatToNewFormat PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldBaseSegmentIntervalOnRetentionAndNumSegments PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldFlushItemsToStoreOnEviction PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldCloseCacheAfterErrorDuringStateStoreClose PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldIterateCacheAndStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAndIterateOverExactBinaryKeys[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldOnlyIterateOverSegmentsInBackwardRangeWhenNullKeyFrom PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldAvoidFlushingDeletionsWithoutDirtyKeys PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldClearNamespaceCacheOnClose PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldClearNamespaceCacheOnClose PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldHandleTombstoneRecords[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldBeAbleToWriteToReInitializedStore[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > testIteratorPeek[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldCloseWrappedStoreAfterErrorDuringCacheClose PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldFetchAllWithinTimestampRange PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldThrowIfTryingToFetchRangeFromClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemoveOnNullAggValue[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldIterateOverAllSegmentsWhenNullKeyFromKeyTo PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldGetRecordsWithPrefixKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFromKeyTo PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRollSegments[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldPutAndFindSessionsInRange[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotShowItemsDeletedFromCacheButFlushedToStoreBeforeDelete PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldFetchAllSessionsWithSameRecordKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldCloseCacheAfterErrorDuringWrappedStoreClose PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldCloseWrappedStoreAfterErrorDuringCacheClose PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldForwardOldValuesWhenDisabled PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldFindValuesWithinRange[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAndIterateOverExactBinaryKeys[RocksDBSessionStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldForwardDirtyItemsWhenFlushCalled PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldThrowNoSuchElementOnPeekNextKeyIfNoNext PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldPutAndFetch[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldReturnSameResultsForSingleKeyFindSessionsBackwardsAndEqualKeyRangeFindSessions PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldThrowIfTryingToFetchFromClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldSetFlushListener PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldCloseWrappedStoreAndCacheAfterErrorDuringCacheFlush PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldSetFlushListener PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldFlushEvictedItemsIntoUnderlyingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldPutBackwardFetchRangeFromCache PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldNotThrowInvalidRangeExceptionWhenBackwardWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldOpenExistingSegments PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldMatchPositionAfterPut[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldGetSegmentIdsFromTimestamp PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldIterateBackwardOverAllSegments PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldCloseWrappedStoreAndCacheAfterErrorDuringCacheFlush PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldReturnSameResultsForSingleKeyFindSessionsAndEqualKeyRangeFindSessions PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleDateFormattedName[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldGetSegmentsWithinTimeRangeOutOfOrder PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutIfAbsentWithNullKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldQueryItemsInCacheAndStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldThrowNullPointerExceptionOnFindSessionsNullKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldThrowIfTryingToRemoveFromClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldGetAllSegments[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldIterateOverAllSegments PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemoveExpired[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRestoreToByteStoreForStandbyTask[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldPutGetToFromCache PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldIterateBackwardOverAllSegmentsWhenNullKeyFromKeyTo PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldBackwardFetchRangeCorrectlyAcrossSegments PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics[org.apache.kafka.streams.state.internals.SessionKeySchema@56a4479a] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchExactKeys[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldFetchAllSegments[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutWithNullKey PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldOnlyIterateOverSegmentsInRangeWhenNullKeyFrom PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldRollSegments PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFindValuesWithinMergingSessionWindowRange[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldCloseAllOpenSegments PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldUpdateSegmentFileNameFromOldColonFormatToNewFormat PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldGetSegmentNameFromId PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToDoPutAllClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldMatchPositionAfterPut[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchExactSession[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldClearSegmentsOnClose PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldLogAndMeasureExpiredRecords[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToDoReverseAllQueryOnClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.SegmentIteratorTest > shouldOnlyIterateOverSegmentsInRange PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldHaveCachingStoreWhenEnabled PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldNotWrapTimestampedByteStore PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldHaveChangeLoggingStoreByDefault PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldHaveMeteredStoreAsOuterStore PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldWrapPlainKeyValueStoreAsTimestampStore PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldThrowNullPointerIfTimeIsNull PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldHaveCachingAndChangeLoggingWhenBothEnabled PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldNotHaveChangeLoggingStoreWhenDisabled PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldThrowNullPointerIfInnerIsNull PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldThrowNullPointerIfKeySerdeIsNull PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldHaveChangeLoggingStoreWhenLoggingEnabled PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldThrowNullPointerIfMetricsScopeIsNull PASSED

org.apache.kafka.streams.state.internals.TimestampedKeyValueStoreBuilderTest > shouldThrowNullPointerIfValueSerdeIsNull PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecordingTriggerTest > shouldTriggerAddedMetricsRecorders PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecordingTriggerTest > shouldThrowIfRecorderToAddHasBeenAlreadyAdded PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecordingTriggerTest > shouldThrowIfRecorderToRemoveCouldNotBeFound PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAllSessionsWithSameRecordKey[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldNotReturnDuplicatesInRanges PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldPutAndBackwardFetch[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.KeyValueSegmentsTest > shouldGetSegmentForTimestamp PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldForwardOldValuesWhenEnabled PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldCloseCacheAfterErrorDuringStateStoreClose PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedWindowStoreTest > shouldCloseUnderlyingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldCloseWrappedStoreAfterErrorDuringCacheClose PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedWindowStoreTest > shouldNotThrowExceptionIfSerdesCorrectlySetFromProcessorContext PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedWindowStoreTest > shouldPassDefaultChangelogTopicNameToStateStoreSerdeIfLoggingDisabled PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedWindowStoreTest > shouldNotExceptionIfFetchReturnsNull PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedWindowStoreTest > shouldNotThrowExceptionIfSerdesCorrectlySetFromConstructorParameters PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedWindowStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedWindowStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.MeteredTimestampedWindowStoreTest > shouldPassChangelogTopicNameToStateStoreSerde PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > testIteratorPeekBackward[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowIfTryingToWriteToClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldFetchCorrectlyAcrossSegments PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldCreateWriteBatches[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReverseIterateOverRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemove[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRemove[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldFetchAndIterateOverExactKeys PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldForwardDirtyItemToListenerWhenEvicted PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFindValuesWithinMergingSessionWindowRange[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnRemoveNullKey[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldHandleTombstoneRecords[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldTakeValueFromCacheIfSameTimestampFlushedToRocks PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotThrowNullPointerExceptionOnPutIfAbsentNullValue PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldCloseOpenIteratorsWhenStoreIsClosedAndNotThrowInvalidStateStoreExceptionOnHasNext[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAllSessionsWithinKeyRange[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnValueOnRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldPutAndFetch[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldReturnNullOnSessionNotFound[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldGetSegmentsWithinTimeRange PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRestoreToByteStoreForActiveTask[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldBackwardFetchAndIterateOverExactKeys PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldLogAndMeasureExpiredRecords[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldNotThrowExceptionRemovingNonexistentKey[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldForwardDirtyItemsWhenFlushCalled PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotThrowConcurrentModificationException PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldGetCorrectSegmentString PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldMatchPositionAfterPut PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldGetAllSegments[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentSessionStoreTest > shouldBackwardFetchCorrectlyAcrossSegments PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldPutAndBackwardFindSessionsInRange[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldNotReturnWindowStoreAsTimestampedStore PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldReturnKeyValueStore PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldReturnSingleItemListIfStoreExists PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldReturnTimestampedWindowStoreAsWindowStore PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldReturnWindowStore PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldReturnTimestampedKeyValueStore PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldReturnEmptyItemListIfStoreDoesntExist PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldThrowExceptionIfStoreIsntOpen PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldReturnTimestampedKeyValueStoreAsKeyValueStore PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldNotReturnKeyValueStoreAsTimestampedStore PASSED

org.apache.kafka.streams.state.internals.GlobalStateStoreProviderTest > shouldReturnSessionStore PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldGetAll[store type = InMemory] PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldGetAllNonDeletedRecords[store type = InMemory] PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldAllowDeleteWhileIterateRecords[store type = InMemory] PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldNotReturnMoreDataWhenIteratorClosed[store type = InMemory] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnValueOnRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldGetAllReturnTimestampOrderedRecords[store type = InMemory] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldIterateAcrossWindows PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldThrowIfTryingToFetchFromClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldSetFlushListener PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAllSessionsWithSameRecordKey[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldNotCreateSegmentThatIsAlreadyExpired PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldGetAll[store type = RocksDB] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnDelete PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > testSize PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldFlushEvictedItemsIntoUnderlyingStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldFetchAllSegments[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldGetAllNonDeletedRecords[store type = RocksDB] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldIterateCacheAndStoreKeyRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldLogAndMeasureExpiredRecords[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchExactKeys[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnNoKeys PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldAllowDeleteWhileIterateRecords[store type = RocksDB] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleColonFormattedName[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeBackwardFetch PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > testPutGetReverseRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAllSessionsWithinKeyRange[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldPerformAllQueriesWithCachingDisabled PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldNotReturnMoreDataWhenIteratorClosed[store type = RocksDB] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldCreateWriteBatches[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFrom PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotThrowInvalidRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFindSessionsToMerge[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.ListValueStoreTest > shouldGetAllReturnTimestampOrderedRecords[store type = RocksDB] PASSED

org.apache.kafka.streams.state.internals.OffsetCheckpointTest > shouldThrowOnInvalidOffsetInWrite PASSED

org.apache.kafka.streams.state.internals.OffsetCheckpointTest > shouldNotWriteCheckpointWhenNoOffsets PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldFetchAllBackwardWithinTimestampRange PASSED

org.apache.kafka.streams.state.internals.OffsetCheckpointTest > testReadWrite PASSED

org.apache.kafka.streams.state.internals.OffsetCheckpointTest > shouldDeleteExistingCheckpointWhenNoOffsets PASSED

org.apache.kafka.streams.state.internals.OffsetCheckpointTest > shouldReadAndWriteSentinelOffset PASSED

org.apache.kafka.streams.state.internals.OffsetCheckpointTest > shouldThrowIOExceptionWhenWritingToNotExistedFile PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldCreateSegments PASSED

org.apache.kafka.streams.state.internals.OffsetCheckpointTest > shouldSkipInvalidOffsetsDuringRead PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFindSessionsToMerge[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRestoreToByteStoreForActiveTask[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotIncludeDeletedFromRangeResult PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyTo PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldReturnSameResultsForSingleKeyFindSessionsAndEqualKeyRangeFindSessions[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldGetAllFromCache PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowExceptionOnRestoreWhenThereIsPreExistingRocksDbFiles PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldDeleteFromStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldIterateBackwardCacheAndStore PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRestore[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnFindSessionsNullKey[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldBeAbleToWriteToReInitializedStore[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldForwardOldValuesWhenEnabled PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleColonFormattedName[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldThrowIfTryingToWriteToClosedCachingStore PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldRemoveValueProvidersFromInjectedMetricsRecorderOnClose PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldDeleteIfSerializedValueIsNull PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAndIterateOverExactBinaryKeys[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > testPutGetWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > testIteratorPeek[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutIfAbsentNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldPutAll PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingPersistentWindowStoreTest > shouldForwardDirtyItemToListenerWhenEvicted PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemoveOnNullAggValue[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotThrowNullPointerExceptionOnPutIfAbsentNullValue PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldPutAll PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotThrowConcurrentModificationException PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldReturnValueOnRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > testSize PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > testPutGetReverseRange PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotThrowInvalidRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotIncludeDeletedFromRangeResult PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldDeleteFromStore PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldDeleteIfSerializedValueIsNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > testPutGetWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldThrowNullPointerExceptionOnPutIfAbsentNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > testPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > testRestoreWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldReturnValueOnReverseRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > testPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > testRestore PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldPerformRangeQueriesWithCachingDisabled PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldReturnValueOnReverseRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRollSegments[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldOpenExistingStoreInRegularMode PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldPutAndFindSessionsInRange[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldPutReverseAll PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldNotThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > testPutGetRange PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldThrowNullPointerExceptionOnGetNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldReturnValueOnRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldReturnValueOnRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldThrowNullPointerExceptionOnDeleteNullKey PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldReturnValueOnReverseRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.InMemoryKeyValueLoggedStoreTest > shouldReturnSameResultsForGetAndRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.MaybeTest > shouldUpholdHashCodeCorrectness PASSED

org.apache.kafka.streams.state.internals.MaybeTest > shouldThrowOnGetUndefinedValue PASSED

org.apache.kafka.streams.state.internals.MaybeTest > shouldAnswerIsDefined PASSED

org.apache.kafka.streams.state.internals.MaybeTest > shouldReturnDefinedValue PASSED

org.apache.kafka.streams.state.internals.MaybeTest > shouldUpholdEqualityCorrectness PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldReturnKVStoreWithPartitionWhenItExists PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldThrowExceptionIfWindowStoreDoesntExist PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldReturnWindowStoreWithPartitionWhenItExists PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldThrowExceptionWhenKVStoreWithPartitionDoesntExists PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldThrowExceptionWhenLookingForWindowStoreWithDifferentType PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldFindGlobalStores PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldReturnKVStoreWhenItExists PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldThrowExceptionWhenLookingForKVStoreWithDifferentType PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldReturnWindowStoreWhenItExists PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldThrowExceptionWhenWindowStoreWithPartitionDoesntExists PASSED

org.apache.kafka.streams.state.internals.QueryableStoreProviderTest > shouldThrowExceptionIfKVStoreDoesntExist PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldBeAbleToWriteToReInitializedStore[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAndIterateOverExactBinaryKeys[RocksDBTimeOrderedSessionStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldVerifyThatPropertyBasedMetricsUseValidPropertyName PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldMatchPositionAfterPut[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > testRestoreWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldFindValuesWithinRange[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnValueOnReverseRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRollSegments[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldMatchPositionAfterPut[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnUUIDsWithStringPrefix PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldFindValuesWithinRange[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotSetCacheInValueProvidersWhenUserProvidesPlainTableFormatConfig PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldOpenExistingSegments PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldGetSegmentIdsFromTimestamp PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemoveExpired[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > testRestore PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldPutOnlyIfAbsentValue PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleDateFormattedName[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleDateFormattedName[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnValueOnReverseRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldMigrateDataFromDefaultToTimestampColumnFamily PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testInitialLoading[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchExactKeys[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldHandleTombstoneRecords PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRestoreToByteStoreForStandbyTask[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFindValuesWithinMergingSessionWindowRange[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldPutReverseAll PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchExactSession[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldNotThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldOpenNewStoreInRegularMode PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRestoreToByteStoreForStandbyTask[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnNullGet PASSED

org.apache.kafka.streams.state.internals.RocksDBSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics[org.apache.kafka.streams.state.internals.WindowKeySchema@4504d271] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAllSessionsWithSameRecordKey[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > testPutGetRange PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=true, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=true, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=true, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=true, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=false, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldOnlyIterateOpenSegments[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=false, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=false, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=false, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > testIteratorPeekBackward[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnNullPut PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnGetNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnValueOnRange PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemove[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldCloseOpenRangeIteratorsWhenStoreClosedAndThrowInvalidStateStoreOnHasNextAndNext PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnValueOnRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFindValuesWithinMergingSessionWindowRange[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnRemoveNullKey[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics[org.apache.kafka.streams.state.internals.SessionKeySchema@112d1c8e] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnValueOnRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldThrowNullPointerExceptionOnDeleteNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldCloseOpenIteratorsWhenStoreIsClosedAndNotThrowInvalidStateStoreExceptionOnHasNext[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldMatchPositionAfterPut PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldHandleToggleOfEnablingBloomFilters PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAllSessionsWithinKeyRange[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnValueOnReverseRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldReturnNullOnSessionNotFound[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldRollSegments PASSED

org.apache.kafka.streams.state.internals.CachingInMemoryKeyValueStoreTest > shouldReturnSameResultsForGetAndRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIteratorTest > shouldPeekNext PASSED

org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIteratorTest > shouldPeekAndIterate PASSED

org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIteratorTest > shouldThrowNoSuchElementWhenNoMoreItemsLeftAndPeekNextCalled PASSED

org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIteratorTest > shouldThrowNoSuchElementWhenNoMoreItemsLeftAndNextCalled PASSED

org.apache.kafka.streams.state.internals.DelegatingPeekingKeyValueIteratorTest > shouldPeekNextKey PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldHaveCachingStoreWhenEnabled PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldHaveChangeLoggingStoreByDefault PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldHaveMeteredStoreAsOuterStore PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldThrowNullPointerIfTimeIsNull PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldHaveCachingAndChangeLoggingWhenBothEnabled PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldNotHaveChangeLoggingStoreWhenDisabled PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldThrowNullPointerIfInnerIsNull PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldThrowNullPointerIfKeySerdeIsNull PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldHaveChangeLoggingStoreWhenLoggingEnabled PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldThrowNullPointerIfMetricsScopeIsNull PASSED

org.apache.kafka.streams.state.internals.KeyValueStoreBuilderTest > shouldThrowNullPointerIfValueSerdeIsNull PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldLogAndMeasureExpiredRecords[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldNotSetFlushListenerOnWrappedNoneCachingStore PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldNotThrowNullPointerExceptionIfFetchReturnsNull PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldNotThrowExceptionRemovingNonexistentKey[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldThrowNullPointerOnPutIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldCloseUnderlyingStore PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldPutToInnerStoreAndRecordPutMetrics PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldFetchAllFromInnerStoreAndRecordFetchMetrics PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldRemoveMetricsOnClose PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldBackwardFetchFromInnerStoreAndRecordFetchMetrics PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldRecordFlushLatency PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldThrowNullPointerOnBackwardFetchIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldBackwardFetchAllFromInnerStoreAndRecordFetchMetrics PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldBackwardFetchRangeFromInnerStoreAndRecordFetchMetrics PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowWhenUserProvidesNewBlockBasedTableFormatConfig PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > testMetrics PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldMatchPositionAfterPut[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldRecordRestoreLatencyOnInit PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldPassDefaultChangelogTopicNameToStateStoreSerdeIfLoggingDisabled PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldFetchRangeFromInnerStoreAndRecordFetchMetrics PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnDelete PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldSetFlushListenerOnWrappedCachingStore PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldRemoveMetricsEvenIfWrappedStoreThrowsOnClose PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldFetchFromInnerStoreAndRecordFetchMetrics PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldDelegateDeprecatedInit PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldDelegateInit PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldThrowNullPointerOnFetchIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.MeteredWindowStoreTest > shouldPassChangelogTopicNameToStateStoreSerde PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldPutAndBackwardFindSessionsInRange[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAllSessionsWithSameRecordKey[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnNullPutAll PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRestore[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldMatchPositionAfterPut[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnNoKeys PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=true, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchExactKeys[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldPutAndBackwardFetch[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchEdgeKeyRange[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldPerformAllQueriesWithCachingDisabled PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAllSessionsWithinKeyRange[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldHandleDeletesOnRestoreAll PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFindSessionsToMerge[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetch[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFindSessionsToMerge[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRolling[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldAddValueProvidersWithoutStatisticsToInjectedMetricsRecorderWhenRecordingLevelInfo PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRemove[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldGetSegmentsWithinBackwardTimeRangeOutOfOrder PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldReturnSameResultsForSingleKeyFindSessionsAndEqualKeyRangeFindSessions[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldUpdateSegmentFileNameFromOldColonFormatToNewFormat PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldGetSegmentNameFromId PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowProcessorStateExceptionOnOpeningReadOnlyDir PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldGetAllBackwards[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldHandleTombstoneRecords[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowExceptionOnRestoreWhenThereIsPreExistingRocksDbFiles PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldClearSegmentsOnClose PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRestore[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchEdgeSingleKey[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnFindSessionsNullKey[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldCallRocksDbConfigSetter PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchWithPrefix[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldBackwardFetchAndIterateOverExactBinaryKeys[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldRemoveValueProvidersFromInjectedMetricsRecorderOnClose PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testSegmentMaintenance[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRemove[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > testIteratorPeek[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testValueIteratorPeek[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=true, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowProcessorStateExceptionOnPutDeletedDir PASSED

org.apache.kafka.streams.state.internals.TimestampedSegmentsTest > shouldGetSegmentForTimestamp PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchEdgeSingleKey[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldRemoveOnNullAggValue[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldPutAndFetch[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testFetchDuplicates[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldPutAll PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldSkipAndRemoveDanglingIndex[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldPutAndFindSessionsInRange[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldVerifyThatMetricsRecordedFromPropertiesGetMeasurementsFromRocksDB PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldPerformRangeQueriesWithCachingDisabled PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchEdgeKeyRange[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBSessionStoreTest > shouldFetchAndIterateOverExactBinaryKeys[RocksDBTimeOrderedSessionStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetPutAllSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetGetSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetPutIfAbsentSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetFetchSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetExpiredWindowRecordDropSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetRestoreSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetSuppressionBufferCountSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetRemoveSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetDeleteSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetPrefixScanSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetPutSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetAllSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetRecordE2ELatencySensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetSuppressionBufferSizeSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetRangeSensor PASSED

org.apache.kafka.streams.state.internals.metrics.StateStoreMetricsTest > shouldGetFlushSensor PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAll[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldHandleTombstoneRecords[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldGetAllSegments[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldRestoreThenDeleteOnRestoreAll PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldVerifyThatPropertyBasedMetricsUseValidPropertyName PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAllNonDeletedRecords[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.StoreQueryUtilsTest > shouldReturnErrorOnBoundViolation PASSED

org.apache.kafka.streams.state.internals.StoreQueryUtilsTest > shouldReturnErrorOnNullContext PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldConvertToBinaryAndBack[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithLargeTimestamps[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractStartTimeFromBinary[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldConvertFromNonPrefixWindowKey[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testHasNextConditionUsingNullKeys[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithZeroTimestamp[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundWithNonZeroTimestamp[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractSequenceFromBinary[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserializeExpectedWindowSize[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserialize[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundMatchesTrailingZeros[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithKeyBytesLargerThanFirstTimestampByte[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testSerializeDeserializeOverflowWindowSize[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractWindowFromBinary[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithKeyBytesLargerAndSmallerThanFirstTimestampByte[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractKeyBytesFromBinary[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldDeserializeEmptyByteArrayToNull[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserializeExpectedChangelogWindowSize[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundWithZeroTimestamp[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeNullToNull[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractBytesKeyFromBinary[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldDeserializeNullToNull[WindowKeySchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldConvertToBinaryAndBack[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithLargeTimestamps[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractStartTimeFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldConvertFromNonPrefixWindowKey[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetch[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testHasNextConditionUsingNullKeys[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithZeroTimestamp[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundWithNonZeroTimestamp[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractSequenceFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserializeExpectedWindowSize[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserialize[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundMatchesTrailingZeros[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithKeyBytesLargerThanFirstTimestampByte[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testSerializeDeserializeOverflowWindowSize[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractWindowFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithKeyBytesLargerAndSmallerThanFirstTimestampByte[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractKeyBytesFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldDeserializeEmptyByteArrayToNull[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserializeExpectedChangelogWindowSize[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundWithZeroTimestamp[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeNullToNull[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractBytesKeyFromBinary[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldDeserializeNullToNull[PrefixedTimeFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldConvertToBinaryAndBack[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithLargeTimestamps[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractStartTimeFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldConvertFromNonPrefixWindowKey[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testHasNextConditionUsingNullKeys[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithZeroTimestamp[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundWithNonZeroTimestamp[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractSequenceFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserializeExpectedWindowSize[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserialize[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundMatchesTrailingZeros[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithKeyBytesLargerThanFirstTimestampByte[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testSerializeDeserializeOverflowWindowSize[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractWindowFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testUpperBoundWithKeyBytesLargerAndSmallerThanFirstTimestampByte[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractKeyBytesFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldDeserializeEmptyByteArrayToNull[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeDeserializeExpectedChangelogWindowSize[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > testLowerBoundWithZeroTimestamp[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldSerializeNullToNull[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldExtractBytesKeyFromBinary[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.WindowKeySchemaTest > shouldDeserializeNullToNull[PrefixedKeyFirstSchema] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowConcurrentModificationException[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=true, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldFetchAllSegments[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotSetStatisticsInValueProvidersWhenUserProvidesStatistics PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnUUIDsWithStringPrefix PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldGetAllSegments[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testBackwardFetchRange[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldLogAndMeasureExpiredRecords[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldVerifyThatMetricsRecordedFromStatisticsGetMeasurementsFromRocksDB PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotSetCacheInValueProvidersWhenUserProvidesPlainTableFormatConfig PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldFetchAllSegments[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutAndFetchBefore[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLogAndMeasureExpiredRecords[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldCloseOpenIteratorsWhenStoreIsClosedAndNotThrowInvalidStateStoreExceptionOnHasNext[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnKeysWithGivenPrefix PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldCreateWriteBatches[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldPutOnlyIfAbsentValue PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldCreateWriteBatches[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testFetchRange[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldRestoreAll PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=true, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreToByteStoreForActiveTask[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldHandleTombstoneRecords PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldLogAndMeasureExpiredRecords[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldHandleDeletesAndPutBackOnRestoreAll PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRestoreToByteStoreForActiveTask[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldEarlyClosedIteratorStillGetAllRecords[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldReturnNullOnWindowNotFound[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnNullGet PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleColonFormattedName[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAndIterateOverExactKeys[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldAddValueProvidersWithStatisticsToInjectedMetricsRecorderWhenRecordingLevelDebug PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testWindowIteratorPeek[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowNullPointerExceptionOnPutIfAbsentNullValue PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnNullPut PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleColonFormattedName[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetBackwardAll[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldCloseOpenRangeIteratorsWhenStoreClosedAndThrowInvalidStateStoreOnHasNextAndNext PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldBeAbleToWriteToReInitializedStore[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testDeleteAndUpdate[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=false, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchWithPrefixKey[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowConcurrentModificationException PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAllReturnTimestampOrderedRecords[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnValueOnRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldHandleToggleOfEnablingBloomFilters PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRollSegments[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > testSize PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldFindValuesWithinRange[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowExceptionWhenFetchRangeIsExpired[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldThrowNullPointerExceptionOnGetNullKey[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowWhenUserProvidesNewBlockBasedTableFormatConfig PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutSameKeyTimestamp[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldBeAbleToWriteToReInitializedStore[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > testPutGetReverseRange PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowInvalidRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnNullPutAll PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAllInTimeRange[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleDateFormattedName[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotIncludeDeletedFromRangeResult PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRollSegments[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldBackwardFetchAllInTimeRange[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreToByteStoreForStandbyTask[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=false, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldDeleteFromStore PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldFindValuesWithinRange[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutAndFetchAfter[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics[WindowSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAndIterateOverExactBinaryKeys[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldDeleteIfSerializedValueIsNull PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldHandleDeletesOnRestoreAll PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldMatchPositionAfterPut[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > testPutGetWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldAddValueProvidersWithoutStatisticsToInjectedMetricsRecorderWhenRecordingLevelInfo PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnPutIfAbsentNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchEdgeKeyRange[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRangeAndSinglePointFetch[RocksDBWindowStore] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowProcessorStateExceptionOnOpeningReadOnlyDir PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > testPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldMatchPositionAfterPut[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleDateFormattedName[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetch[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=false, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > testRestoreWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldCallRocksDbConfigSetter PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnValueOnReverseRangeNullToNull PASSED

org.apache.kafka.streams.tests.RelationalSmokeTestTest > verifySmokeTestLogic PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldGetAllBackwards[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRestoreToByteStoreForStandbyTask[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchEdgeSingleKey[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowProcessorStateExceptionOnPutDeletedDir PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchWithPrefix[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testInitialLoading[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > testRestore PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRemove[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics[org.apache.kafka.streams.state.internals.WindowKeySchema@3b2f4a93] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnValueOnReverseRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchEdgeSingleKey[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldSkipAndRemoveDanglingIndex[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldVerifyThatMetricsRecordedFromPropertiesGetMeasurementsFromRocksDB PASSED

org.apache.kafka.streams.state.internals.SessionStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=false, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.ValueAndTimestampSerializerTest > shouldDropSerializedValueIfEqualWithGreaterTimestamp PASSED

org.apache.kafka.streams.state.internals.ValueAndTimestampSerializerTest > shouldSerializeNonNullDataUsingTheInternalSerializer PASSED

org.apache.kafka.streams.state.internals.ValueAndTimestampSerializerTest > shouldReturnNullWhenTheInternalSerializerReturnsNull PASSED

org.apache.kafka.streams.state.internals.ValueAndTimestampSerializerTest > shouldKeepSerializedValueIfOutOfOrder PASSED

org.apache.kafka.streams.state.internals.ValueAndTimestampSerializerTest > shouldSerializeNullDataAsNull PASSED

org.apache.kafka.streams.tests.SystemTestUtilTest > shouldThrowExceptionIfNotCorrectKeyValuePairSeparator PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyTo[true] PASSED

org.apache.kafka.streams.tests.SystemTestUtilTest > shouldThrowExceptionOnNull PASSED

org.apache.kafka.streams.tests.SystemTestUtilTest > shouldParseCorrectMap PASSED

org.apache.kafka.streams.tests.SystemTestUtilTest > shouldThrowExceptionIfNotCorrectKeyValueSeparator PASSED

org.apache.kafka.streams.tests.SystemTestUtilTest > shouldParseSingleKeyValuePairString PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchEdgeKeyRange[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchFromCache[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldHandleTombstoneRecords[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldPutReverseAll PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldOnlyIterateOpenSegments[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldRestoreThenDeleteOnRestoreAll PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldNotThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAndIterateOverKeyBackwardRange[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetch[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > testPutGetRange PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldGetAllBackwardFromCache[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnGetNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldMatchPositionAfterPutWithFlushListener[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldGetAllSegments[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnValueOnRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFromKeyTo[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotSetStatisticsInValueProvidersWhenUserProvidesStatistics PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnValueOnRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldFetchAllSegments[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotForwardOldValuesWhenDisabled[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldThrowNullPointerExceptionOnDeleteNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLogAndMeasureExpiredRecords[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchRangeFromCache[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnValueOnReverseRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldVerifyThatMetricsRecordedFromStatisticsGetMeasurementsFromRocksDB PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateBackwardCacheAndStoreKeyRange[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotThrowInvalidBackwardRangeExceptionWithNegativeFromKey[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBStoreTest > shouldReturnSameResultsForGetAndRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldCreateWriteBatches[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRestore[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateBackwardAcrossWindows[true] PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldThrowInvalidStoreExceptionIfTsWindowStoreClosed PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldReturnEmptyListIfNoStoresFoundWithName PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldReturnEmptyListForInvalidPartitions PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldThrowInvalidStoreExceptionIfKVStoreClosed PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldReturnSingleStoreForPartition PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldNotFindWindowStoresAsTimestampedStore PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnKeysWithGivenPrefix PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreToByteStoreForActiveTask[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldThrowInvalidStoreExceptionIfNotAllStoresAvailable PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldFindTimestampedKeyValueStoresAsKeyValueStores PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldFindWindowStores PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldFindTimestampedWindowStores PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAndIterateOverKeyRange[true] PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldThrowInvalidStoreExceptionIfTsKVStoreClosed PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldFindTimestampedWindowStoresAsWindowStore PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldNotFindKeyValueStoresAsTimestampedStore PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldFindKeyValueStores PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldFindTimestampedKeyValueStores PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldMatchPositionAfterPutWithoutFlushListener[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue[true] PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldThrowInvalidStoreExceptionIfWindowStoreClosed PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowIfWrongStore[true] PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldFindSessionStores PASSED

org.apache.kafka.streams.state.internals.StreamThreadStateStoreProviderTest > shouldThrowInvalidStoreExceptionIfSessionStoreClosed PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldDisableLogCompactionWithRetainDuplicates PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldHaveCachingStoreWhenEnabled PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldHaveChangeLoggingStoreByDefault PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldHaveMeteredStoreAsOuterStore PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldDisableCachingWithRetainDuplicates PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldThrowNullPointerIfTimeIsNull PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldHaveCachingAndChangeLoggingWhenBothEnabled PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldNotHaveChangeLoggingStoreWhenDisabled PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldThrowNullPointerIfInnerIsNull PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldThrowNullPointerIfKeySerdeIsNull PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldHaveChangeLoggingStoreWhenLoggingEnabled PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldThrowNullPointerIfMetricsScopeIsNull PASSED

org.apache.kafka.streams.state.internals.WindowStoreBuilderTest > shouldThrowNullPointerIfValueSerdeIsNull PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldRestoreAll PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFrom[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldCloseCacheAndWrappedStoreAfterErrorDuringCacheFlush[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleColonFormattedName[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRolling[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateCacheAndStore[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldClearNamespaceCacheOnClose[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldHandleDeletesAndPutBackOnRestoreAll PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAllWithinTimestampRange[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowIfTryingToFetchRangeFromClosedCachingStore[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldBeAbleToWriteToReInitializedStore[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFromKeyTo[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testSegmentMaintenance[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchWithPrefixKey[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testValueIteratorPeek[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testFetchDuplicates[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldAddValueProvidersWithStatisticsToInjectedMetricsRecorderWhenRecordingLevelDebug PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRollSegments[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowNullPointerExceptionOnPutIfAbsentNullValue PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldFindValuesWithinRange[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAll[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAllNonDeletedRecords[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowConcurrentModificationException PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleDateFormattedName[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowConcurrentModificationException[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnValueOnRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > testSize PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testBackwardFetchRange[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreToByteStoreForStandbyTask[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > testPutGetReverseRange PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotReturnDuplicatesInRanges[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutAndFetchBefore[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics[WindowSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowInvalidRangeExceptionWithFromLargerThanTo PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldSkipNonExistBaseKeyInCache[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldCloseCacheAfterErrorDuringStateStoreClose[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldCloseWrappedStoreAfterErrorDuringCacheClose[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldCloseOpenIteratorsWhenStoreIsClosedAndNotThrowInvalidStateStoreExceptionOnHasNext[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldMatchPositionAfterPut[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotIncludeDeletedFromRangeResult PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAndIterateOverExactKeys[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testFetchRange[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchEdgeKeyRange[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldTakeValueFromCacheIfSameTimestampFlushedToRocks[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldDeleteFromStore PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldLogAndMeasureExpiredRecords[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetch[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldBackwardFetchAndIterateOverExactKeys[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldEarlyClosedIteratorStillGetAllRecords[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldDeleteIfSerializedValueIsNull PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldReturnNullOnWindowNotFound[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldForwardDirtyItemsWhenFlushCalled[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > testPutGetWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateAcrossWindows[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowIfTryingToFetchFromClosedCachingStore[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAndIterateOverExactKeys[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldSetFlushListener[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnPutIfAbsentNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldGetAllBackwards[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testWindowIteratorPeek[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFlushEvictedItemsIntoUnderlyingStore[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchEdgeSingleKey[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchWithPrefix[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > testPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRemove[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateCacheAndStoreKeyRange[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetBackwardAll[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > testRestoreWithDefaultSerdes PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchEdgeSingleKey[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeBackwardFetch[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testDeleteAndUpdate[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnValueOnReverseRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldSkipAndRemoveDanglingIndex[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFrom[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnSameResultsForGetAndReverseRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchEdgeKeyRange[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAllBackwardWithinTimestampRange[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAllReturnTimestampOrderedRecords[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnPutNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldHandleTombstoneRecords[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyTo[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldGetAllFromCache[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldDelegateDeprecatedInit[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldDelegateInit[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowExceptionWhenFetchRangeIsExpired[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > testRestore PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldThrowNullPointerExceptionOnGetNullKey[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetch[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateBackwardCacheAndStore[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnValueOnReverseRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutSameKeyTimestamp[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldForwardOldValuesWhenEnabled[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowIfTryingToWriteToClosedCachingStore[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowInvalidReverseRangeExceptionWithNegativeFromKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldGetAllSegments[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldPutReverseAll PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAllInTimeRange[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldForwardDirtyItemToListenerWhenEvicted[true] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldNotThrowNullPointerExceptionOnPutAllNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldFetchAllSegments[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyTo[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldBackwardFetchAllInTimeRange[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > testPutGetRange PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLogAndMeasureExpiredRecords[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchFromCache[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnGetNullKey PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutAndFetchAfter[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldCreateWriteBatches[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnValueOnRangeNullToNull PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAndIterateOverKeyBackwardRange[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAndIterateOverExactBinaryKeys[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnValueOnRangeNullToKey PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldGetAllBackwardFromCache[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreToByteStoreForActiveTask[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldThrowNullPointerExceptionOnDeleteNullKey PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldMatchPositionAfterPutWithFlushListener[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnValueOnReverseRangeKeyToNull PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRangeAndSinglePointFetch[RocksDBTimeOrderedWindowStoreWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFromKeyTo[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimestampedStoreTest > shouldReturnSameResultsForGetAndRangeWithEqualKeys PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldReturnPriorValueForBufferedKey[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldReturnUndefinedOnPriorValueForNotBufferedKey[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldRestoreV3FormatWithV2Header[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldTrackMinTimestamp[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldNotRestoreUnrecognizedVersionRecord[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldRestoreV1Format[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldRespectEvictionPredicate[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldFlush[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldRemoveData[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldTrackCount[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldInit[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldTrackSize[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldRestoreV2Format[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldRejectNullValues[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldRestoreV3Format[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldMatchPositionAfterPut[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldRestoreOldUnversionedFormat[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldAcceptData[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedKeyValueBufferTest > shouldEvictOldestAndUpdateSizeAndCountAndMinTimestamp[0: test=in-memory buffer] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotForwardOldValuesWhenDisabled[false] PASSED

org.apache.kafka.streams.state.internals.metrics.NamedCacheMetricsTest > shouldGetHitRatioSensorWithBuiltInMetricsVersionCurrent PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleColonFormattedName[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchRangeFromCache[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateBackwardCacheAndStoreKeyRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotThrowInvalidBackwardRangeExceptionWithNegativeFromKey[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateBackwardAcrossWindows[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldBeAbleToWriteToReInitializedStore[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchWithPrefixKey[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAndIterateOverKeyRange[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testInitialLoading[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRollSegments[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldMatchPositionAfterPutWithoutFlushListener[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowIfWrongStore[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldFindValuesWithinRange[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFrom[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldCloseCacheAndWrappedStoreAfterErrorDuringCacheFlush[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateCacheAndStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldClearNamespaceCacheOnClose[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldOnlyIterateOpenSegments[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAllWithinTimestampRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowIfTryingToFetchRangeFromClosedCachingStore[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleDateFormattedName[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFromKeyTo[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreToByteStoreForStandbyTask[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics[SessionSchemaWithIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldMatchPositionAfterPut[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchEdgeKeyRange[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRestore[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetch[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldNotThrowWhenRestoringOnMissingHeaders[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldNotReturnDuplicatesInRanges[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldSkipNonExistBaseKeyInCache[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldGetAllBackwards[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldCloseCacheAfterErrorDuringStateStoreClose[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldCloseWrappedStoreAfterErrorDuringCacheClose[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRolling[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchEdgeSingleKey[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndBackwardFetchWithPrefix[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRemove[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAndIterateOverExactKeys[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchEdgeSingleKey[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldSkipAndRemoveDanglingIndex[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldTakeValueFromCacheIfSameTimestampFlushedToRocks[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchEdgeKeyRange[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testSegmentMaintenance[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldBackwardFetchAndIterateOverExactKeys[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldHandleTombstoneRecords[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testValueIteratorPeek[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldForwardDirtyItemsWhenFlushCalled[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testFetchDuplicates[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetch[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateAcrossWindows[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowIfTryingToFetchFromClosedCachingStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldSetFlushListener[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFlushEvictedItemsIntoUnderlyingStore[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAll[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldGetAllSegments[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateCacheAndStoreKeyRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeBackwardFetch[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAllNonDeletedRecords[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldFetchAllSegments[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFrom[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowConcurrentModificationException[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLogAndMeasureExpiredRecords[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldFetchAllBackwardWithinTimestampRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyTo[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testBackwardFetchRange[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldCreateWriteBatches[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldGetAllFromCache[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldDelegateDeprecatedInit[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldDelegateInit[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutAndFetchBefore[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldIterateBackwardCacheAndStore[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreToByteStoreForActiveTask[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldCloseOpenIteratorsWhenStoreIsClosedAndNotThrowInvalidStateStoreExceptionOnHasNext[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldForwardOldValuesWhenEnabled[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowIfTryingToWriteToClosedCachingStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch[false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testFetchRange[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedCachingPersistentWindowStoreTest > shouldForwardDirtyItemToListenerWhenEvicted[false] PASSED

org.apache.kafka.streams.state.internals.WrappingStoreProviderTest > shouldReturnSingleStoreWhenQueryWithPartition PASSED

org.apache.kafka.streams.state.internals.WrappingStoreProviderTest > shouldThrowInvalidStoreExceptionIfNoStoreOfTypeFound PASSED

org.apache.kafka.streams.state.internals.WrappingStoreProviderTest > shouldFindWindowStores PASSED

org.apache.kafka.streams.state.internals.WrappingStoreProviderTest > shouldFindKeyValueStores PASSED

org.apache.kafka.streams.state.internals.WrappingStoreProviderTest > shouldReturnAllStoreWhenQueryWithoutPartition PASSED

org.apache.kafka.streams.state.internals.WrappingStoreProviderTest > shouldThrowInvalidStoreExceptionIfNoPartitionFound PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleColonFormattedName[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldLogAndMeasureExpiredRecords[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldEarlyClosedIteratorStillGetAllRecords[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldReturnNullOnWindowNotFound[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorSingleTopic[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAndIterateOverExactKeys[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldBeAbleToWriteToReInitializedStore[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldPutAndFetchWithPrefixKey[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testWindowIteratorPeek[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRollSegments[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetBackwardAll[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldFindValuesWithinRange[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testDeleteAndUpdate[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldGetAllReturnTimestampOrderedRecords[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldLoadSegmentsWithOldStyleDateFormattedName[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldNotThrowExceptionWhenFetchRangeIsExpired[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldThrowNullPointerExceptionOnGetNullKey[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreToByteStoreForStandbyTask[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutSameKeyTimestamp[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBTimeOrderedWindowSegmentedBytesStoreTest > shouldRestoreRecordsAndConsistencyVectorMultipleTopics[SessionSchemaWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldCleanupNamedCacheOnClose PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldNotLoopForEverWhenEvictingAndCurrentCacheIsEmpty PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldDelete PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldEvictImmediatelyIfCacheSizeIsZero PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldPutAll PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldCalculateSizeInBytes PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldSkipToEntryWhenToInclusiveIsFalseInRange PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldSkipEntriesWhereValueHasBeenEvictedFromCache PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldPeekNextKeyReverseRange PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldGetSameKeyAsPeekNext PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > basicPutGet PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldFetchAllEntriesInCacheInReverseOrder PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldReturnAllUnevictedValuesFromCacheInReverseOrder PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldPeekAndIterateOverRange PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldNotClashWithOverlappingNames PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldResizeAndShrink PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldFetchAllEntriesInCache PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAllInTimeRange[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > cacheOverheadsLargeValues PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > evict PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldThrowIfNoPeekNextKeyRange PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldNotBlowUpOnNonExistentKeyWhenDeleting PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldNotFlushAfterDelete PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldNotForwardCleanEntryOnEviction PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldSkipEntriesWhereValueHasBeenEvictedFromCacheReverseRange PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldGetSameKeyAsPeekNextReverseRange PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldNotBlowUpOnNonExistentNamespaceWhenDeleting PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldBackwardFetchAllInTimeRange[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testPutAndFetchAfter[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > cacheOverheadsSmallValues PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldReturnFalseIfNoNextKey PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldFlushDirtyEntriesForNamespace PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldPeekAndIterateOverReverseRange PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldPeekNextKey PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldReturnNullIfKeyIsNull PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldReturnFalseIfNoNextKeyReverseRange PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldNotFlushCleanEntriesForNamespace PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldEvictAfterPutIfAbsent PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldReturnAllUnevictedValuesFromCache PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldEvictAfterPutAll PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldEvictImmediatelyIfCacheSizeIsVerySmall PASSED

org.apache.kafka.streams.state.internals.ThreadCacheTest > shouldThrowIfNoPeekNextKeyReverseRange PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldFetchAndIterateOverExactBinaryKeys[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=true, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=true, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=true, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=true, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=false, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=false, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=false, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=InMemory, enableLogging=false, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.RocksDBWindowStoreTest > testRangeAndSinglePointFetch[RocksDBTimeOrderedWindowStoreWithoutIndex] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyTo[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchFromCache[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAndIterateOverKeyBackwardRange[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=true, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldGetAllBackwardFromCache[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldMatchPositionAfterPutWithFlushListener[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFromKeyTo[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchRangeFromCache[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateBackwardCacheAndStoreKeyRange[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldNotThrowInvalidBackwardRangeExceptionWithNegativeFromKey[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=true, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateBackwardAcrossWindows[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAndIterateOverKeyRange[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldMatchPositionAfterPutWithoutFlushListener[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowIfWrongStore[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=true, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFrom[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldCloseCacheAndWrappedStoreAfterErrorDuringCacheFlush[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateCacheAndStore[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldClearNamespaceCacheOnClose[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAllWithinTimestampRange[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowIfTryingToFetchRangeFromClosedCachingStore[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=true, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFromKeyTo[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldForwardOldValuesWhenDisabled[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=false, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=false, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldNotReturnDuplicatesInRanges[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldSkipNonExistBaseKeyInCache[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldCloseCacheAfterErrorDuringStateStoreClose[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldCloseWrappedStoreAfterErrorDuringCacheClose[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=false, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAndIterateOverExactKeys[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldTakeValueFromCacheIfSameTimestampFlushedToRocks[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldBackwardFetchAndIterateOverExactKeys[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=RocksDB, enableLogging=false, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldForwardDirtyItemsWhenFlushCalled[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateAcrossWindows[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowIfTryingToFetchFromClosedCachingStore[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldSetFlushListener[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFlushEvictedItemsIntoUnderlyingStore[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateCacheAndStoreKeyRange[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeBackwardFetch[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFrom[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=Timed, enableLogging=true, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAllBackwardWithinTimestampRange[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyTo[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldGetAllFromCache[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldDelegateDeprecatedInit[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldDelegateInit[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateBackwardCacheAndStore[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldForwardOldValuesWhenEnabled[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowIfTryingToWriteToClosedCachingStore[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey[true] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=Timed, enableLogging=true, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldForwardDirtyItemToListenerWhenEvicted[true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyTo[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchFromCache[false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=Timed, enableLogging=true, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAndIterateOverKeyBackwardRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldGetAllBackwardFromCache[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldMatchPositionAfterPutWithFlushListener[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFromKeyTo[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchRangeFromCache[false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=Timed, enableLogging=true, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateBackwardCacheAndStoreKeyRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldNotThrowInvalidBackwardRangeExceptionWithNegativeFromKey[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateBackwardAcrossWindows[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAndIterateOverKeyRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldMatchPositionAfterPutWithoutFlushListener[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldNotThrowNullPointerExceptionOnPutNullValue[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowIfWrongStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFrom[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldCloseCacheAndWrappedStoreAfterErrorDuringCacheFlush[false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=Timed, enableLogging=false, enableCaching=true, forward=true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateCacheAndStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldClearNamespaceCacheOnClose[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldNotThrowInvalidRangeExceptionWithNegativeFromKey[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAllWithinTimestampRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowIfTryingToFetchRangeFromClosedCachingStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyFromKeyTo[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldForwardOldValuesWhenDisabled[false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=Timed, enableLogging=false, enableCaching=true, forward=false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=Timed, enableLogging=false, enableCaching=false, forward=true] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldNotReturnDuplicatesInRanges[false] PASSED

org.apache.kafka.streams.state.internals.WindowStoreFetchTest > testStoreConfig[storeType=Timed, enableLogging=false, enableCaching=false, forward=false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldSkipNonExistBaseKeyInCache[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldCloseCacheAfterErrorDuringStateStoreClose[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldCloseWrappedStoreAfterErrorDuringCacheClose[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAndIterateOverExactKeys[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldTakeValueFromCacheIfSameTimestampFlushedToRocks[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldBackwardFetchAndIterateOverExactKeys[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldForwardDirtyItemsWhenFlushCalled[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateAcrossWindows[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowNullPointerExceptionOnPutNullKey[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowIfTryingToFetchFromClosedCachingStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldSetFlushListener[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFlushEvictedItemsIntoUnderlyingStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateCacheAndStoreKeyRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeBackwardFetch[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutBackwardFetchRangeFromCacheForNullKeyFrom[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldFetchAllBackwardWithinTimestampRange[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldPutFetchRangeFromCacheForNullKeyTo[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldGetAllFromCache[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldDelegateDeprecatedInit[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldDelegateInit[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldIterateBackwardCacheAndStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldForwardOldValuesWhenEnabled[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowIfTryingToWriteToClosedCachingStore[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldThrowNullPointerExceptionOnFetchNullKey[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldReturnSameResultsForSingleKeyFetchAndEqualKeyRangeFetch[false] PASSED

org.apache.kafka.streams.state.internals.TimeOrderedWindowStoreTest > shouldForwardDirtyItemToListenerWhenEvicted[false] PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetCurrentSizeofAllMemTables PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetEstimatedNumberOfKeys PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetEstimatedMemoryOfTableReaders PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetLiveSstFilesSize PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetCurrentSizeofActiveMemTable PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetPinnedUsageOfBlockCacheWithSingleCache PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetNumberOfRunningFlushes PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetEstimatedBytesOfPendingCompactions PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetNumberOfBackgroundErrors PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetNumberOfRunningCompactions PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetCompactionPending PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetUsageOfBlockCacheWithSingleCache PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetNumberOfDeletesActiveMemTable PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetCapacityOfBlockCacheWithMultipleCaches PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetSizeofAllMemTables PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetPinnedUsageOfBlockCacheWithMultipleCaches PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetNumberOfImmutableMemTables PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetNumberOfEntriesActiveMemTable PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetTotalSstFilesSize PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetUsageOfBlockCacheWithMultipleCaches PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetCapacityOfBlockCacheWithSingleCache PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetNumberOfEntriesImmutableMemTables PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetMemTableFlushPending PASSED

org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorderGaugesTest > shouldGetNumberOfDeletesImmutableMemTables PASSED

> Task :streams:unitTest FAILED
53 actionable tasks: 15 executed, 38 up-to-date
