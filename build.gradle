/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/wrapper.gradle"
apply from: "$rootDir/gradle/rat.gradle"
apply from: "$rootDir/gradle/release.gradle"

allprojects {
  apply plugin: "idea"
  apply plugin: "eclipse"

  repositories {
    mavenCentral()
  }
}

subprojects {
  apply from: "$rootDir/gradle/artifacts.gradle"
  apply plugin: 'checkstyle'

  dependencies {
    // Common test dependencies
    testCompile([
      libs.junit,
      libs.easymock,
      libs.powermock,
      libs.powermockEasymock,
      libs.slf4jlog4j,
    ])
  }

  // Common test configuration
  test {
    testLogging {
      events "passed", "skipped", "failed"
      exceptionFormat = 'full'
    }
    maxParallelForks = project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() : Runtime.runtime.availableProcessors()
  }

  // Common checkstyle configuration
  checkstyle {
    configFile = file("$rootDir/checkstyle/checkstyle.xml")
    configProperties = [importControlFile: "$rootDir/checkstyle/import-control.xml"]
  }
  test.dependsOn('checkstyleMain', 'checkstyleTest')
}

project(':core') {
  println "Building project 'core' with Scala version $versions.scala"

  apply plugin: 'scala'
  archivesBaseName = "kafka_${versions.scalaBase}"

  dependencies {
    compile([
            project(':clients'),
            libs.slf4jlog4j,
            libs.scala,
            libs.zookeeper,
            libs.zkclient,
            libs.metrics,
            libs.joptSimple,
    ])

    // These modules were broken out of core scala in 2.10. Can remove special handling when 2.10 support is dropped.
    if (versions.scalaBase != "2.10") {
      compile libs.scalaXml
      compile libs.scalaParserCombinators
    }

    testCompile([
            project(path: ':clients', configuration: 'archives'),
            libs.objenesis,
            libs.scalaTest,
            libs.hadoopMiniKdc,
            libs.bcpkix
    ])
  }

  configurations {
    // manually excludes some unnecessary dependencies
    compile.exclude module: 'javax'
    compile.exclude module: 'jline'
    compile.exclude module: 'jms'
    compile.exclude module: 'jmxri'
    compile.exclude module: 'jmxtools'
    compile.exclude module: 'mail'
    compile.exclude module: 'netty'
    // To prevent a UniqueResourceException due the same resource existing in both
    // org.apache.directory.api/api-all and org.apache.directory.api/api-ldap-schema-data
    testCompile.exclude module: 'api-ldap-schema-data'
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('slf4j-log4j12*')
    }
    from (configurations.runtime) {
      exclude('kafka-clients*')
    }
    into "$buildDir/dependant-libs-${versions.scala}"
  }

  tasks.create(name: "genProducerConfigDocs", dependsOn:jar, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.apache.kafka.clients.producer.ProducerConfig'
    standardOutput = new File("$rootDir/docs/producer_config.html").newOutputStream()
  }

  tasks.create(name: "genConsumerConfigDocs", dependsOn:jar, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.apache.kafka.clients.consumer.ConsumerConfig'
    standardOutput = new File("$rootDir/docs/consumer_config.html").newOutputStream()
  }

  tasks.create(name: "genKafkaConfigDocs", dependsOn:jar, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'kafka.server.KafkaConfig'
    standardOutput = new File("$rootDir/docs/kafka_config.html").newOutputStream()
  }

  task siteDocsTar(dependsOn: ['genProducerConfigDocs', 'genConsumerConfigDocs', 'genKafkaConfigDocs', ':connect:runtime:genConnectConfigDocs'], type: Tar) {
    classifier = 'site-docs'
    compression = Compression.GZIP
    from project.file("../docs")
    into 'site-docs'
  }

  tasks.create(name: "releaseTarGz", dependsOn: configurations.archives.artifacts, type: Tar) {
    into "kafka_${versions.scalaBase}-${version}"
    compression = Compression.GZIP
    from(project.file("../bin")) { into "bin/" }
    from(project.file("../config")) { into "config/" }
    from '../LICENSE'
    from '../NOTICE'
    from(configurations.runtime) { into("libs/") }
    from(configurations.archives.artifacts.files) { into("libs/") }
    from(project.siteDocsTar) { into("site-docs/") }
    from(project(':tools').jar) { into("libs/") }
    from(project(':tools').configurations.runtime) { into("libs/") }
    from(project(':connect:api').jar) { into("libs/") }
    from(project(':connect:api').configurations.runtime) { into("libs/") }
    from(project(':connect:runtime').jar) { into("libs/") }
    from(project(':connect:runtime').configurations.runtime) { into("libs/") }
    from(project(':connect:json').jar) { into("libs/") }
    from(project(':connect:json').configurations.runtime) { into("libs/") }
    from(project(':connect:file').jar) { into("libs/") }
    from(project(':connect:file').configurations.runtime) { into("libs/") }
    from(project(':connect:tools').jar) { into("libs/") }
    from(project(':connect:tools').configurations.runtime) { into("libs/") }
  }

  jar {
    dependsOn('copyDependantLibs', 'copyDependantTestLibs')
  }

  jar.manifest {
    attributes(
      'Version': "${version}"
    )
  }

  tasks.create(name: "copyDependantTestLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('*.jar')
    }
    into "$buildDir/dependant-testlibs"
  }

  // Since this is not org.apache.kafka it needs its own import control file
  checkstyle {
    configProperties = [importControlFile: "$rootDir/checkstyle/import-control-core.xml"]
  }
}

project(':examples') {
  archivesBaseName = "kafka-examples"

  dependencies {
    compile project(':core')
  }

  // Since this is not org.apache.kafka it needs its own import control file
  checkstyle {
    configProperties = [importControlFile: "$rootDir/checkstyle/import-control-core.xml"]
  }
}

project(':clients') {
  archivesBaseName = "kafka-clients"

  dependencies {
    compile([
            libs.slf4jApi,
            libs.snappyJava,
            libs.lz4,
            libs.bcpkix,
    ])
  }

  task determineCommitId {
    ext.commitId = "unknown"
    def takeFromHash = 16
    if (file("../.git/HEAD").exists()) {
      def headRef = file("../.git/HEAD").text
      if (headRef.contains('ref: ')) {
        headRef = headRef.replaceAll('ref: ', '').trim()
        commitId = file("../.git/$headRef").text.trim().take(takeFromHash)
      } else {
        commitId = headRef.trim().take(takeFromHash)
      }
    } else {
      commitId
    }
  }

  def buildVersionFileName = "kafka-version.properties"

  task createVersionFile(dependsOn: determineCommitId) {
    ext.receiptFile = file("$buildDir/kafka/$buildVersionFileName")
    outputs.file receiptFile
    outputs.upToDateWhen { false }
    doLast {
      def data = [
        commitId: determineCommitId.commitId,
        version: version,
      ]

      receiptFile.parentFile.mkdirs()
      def content = data.entrySet().collect { "$it.key=$it.value" }.sort().join("\n")
      receiptFile.setText(content, "ISO-8859-1")
    }
  }

  jar {
    dependsOn createVersionFile
    from("$buildDir") {
        include "kafka/$buildVersionFileName"
    }
  }

  clean.doFirst {
    delete "$buildDir/kafka/"
  }

  // Limit javadoc to only client facing apis
  javadoc {
    include "**/org/apache/kafka/clients/consumer/*"
    include "**/org/apache/kafka/clients/producer/*"
    include "**/org/apache/kafka/common/*"
    include "**/org/apache/kafka/common/errors/*"
    include "**/org/apache/kafka/common/serialization/*"
  }
}

project(':tools') {
    archivesBaseName = "kafka-tools"

    dependencies {
        compile([
                project(':clients'),
                project(':log4j-appender'),
                libs.argparse4j,
                libs.jacksonDatabind,
                libs.slf4jlog4j,
        ])

        testCompile([
                project(path: ':clients', configuration: 'archives'),
        ])
    }

    tasks.create(name: "copyDependantLibs", type: Copy) {
        from (configurations.testRuntime) {
            include('slf4j-log4j12*')
        }
        from (configurations.runtime) {
            exclude('kafka-clients*')
        }
        into "$buildDir/dependant-libs-${versions.scala}"
    }

    jar {
        dependsOn 'copyDependantLibs'
    }
}

project(':streams') {
    archivesBaseName = "kafka-streams"

    dependencies {
        compile([
                project(':clients'),
                libs.rocksDBJni,
                libs.slf4jlog4j,
        ])

        testCompile([
                project(path: ':clients', configuration: 'archives'),
        ])
    }

    tasks.create(name: "copyDependantLibs", type: Copy) {
        from (configurations.testRuntime) {
            include('slf4j-log4j12*')
        }
        from (configurations.runtime) {
            exclude('kafka-clients*')
        }
        into "$buildDir/dependant-libs-${versions.scala}"
    }

    jar {
        dependsOn 'copyDependantLibs'
    }
}

project(':log4j-appender') {
  archivesBaseName = "kafka-log4j-appender"

  dependencies {
      compile([
              project(':clients'),
              libs.slf4jlog4j,
      ])

      testCompile([
              project(path: ':clients', configuration: 'archives')
      ])
  }
}

project(':connect:api') {
  archivesBaseName = "connect-api"

  dependencies {
      compile([
              project(':clients'),
              libs.slf4jApi,
      ])
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('slf4j-log4j12*')
    }
    from (configurations.runtime) {
      exclude('kafka-clients*')
      exclude('connect-*')
    }
    into "$buildDir/dependant-libs"
  }

  jar {
    dependsOn copyDependantLibs
  }
}

project(':connect:json') {
  archivesBaseName = "connect-json"

  dependencies {
        compile([
                project(':connect:api'),
                libs.slf4jApi,
                libs.jacksonDatabind,
        ])
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('slf4j-log4j12*')
    }
    from (configurations.runtime) {
      exclude('kafka-clients*')
      exclude('connect-*')
    }
    into "$buildDir/dependant-libs"
  }

  jar {
    dependsOn copyDependantLibs
  }
}

project(':connect:runtime') {
  archivesBaseName = "connect-runtime"

    dependencies {
        compile([
                project(':clients'),
                project(':connect:api'),
                libs.slf4jApi,
                libs.jettyServer,
                libs.jettyServlet,
                libs.jacksonJaxrsJsonProvider,
                libs.jerseyContainerServlet,
        ])

        testCompile([
                project(path: ':clients', configuration: 'archives'),
                project(":connect:json"),
                libs.junit,
                libs.easymock,
                libs.powermock,
                libs.powermockEasymock,
                libs.slf4jlog4j
        ])
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('slf4j-log4j12*')
    }
    from (configurations.runtime) {
      exclude('kafka-clients*')
      exclude('connect-*')
    }
    into "$buildDir/dependant-libs"
  }

  jar {
    dependsOn copyDependantLibs
  }

  tasks.create(name: "genConnectConfigDocs", dependsOn:jar, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.apache.kafka.connect.runtime.distributed.DistributedConfig'
    standardOutput = new File("$rootDir/docs/connect_config.html").newOutputStream()
  }
}

project(':connect:file') {
  archivesBaseName = "connect-file"

  dependencies {
      compile([
              project(':connect:api'),
              libs.slf4jApi,
      ])

      testCompile([
              libs.junit,
              libs.easymock,
              libs.powermock,
              libs.powermockEasymock,
              libs.slf4jlog4j,
      ])
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('slf4j-log4j12*')
    }
    from (configurations.runtime) {
      exclude('kafka-clients*')
      exclude('connect-*')
    }
    into "$buildDir/dependant-libs"
  }

  jar {
    dependsOn copyDependantLibs
  }
}

project(':connect:tools') {
  archivesBaseName = "connect-tools"

  dependencies {
    compile([
      project(':connect:api'),
      libs.slf4jApi,
      libs.jacksonDatabind,
    ])
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('slf4j-log4j12*')
    }
    from (configurations.runtime) {
      exclude('kafka-clients*')
      exclude('connect-*')
    }
    into "$buildDir/dependant-libs"
  }

  jar {
    dependsOn copyDependantLibs
  }
}
