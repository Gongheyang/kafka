# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
# broker的唯一标示，只要broker.id没变化就不会影响consumers的消息情况
broker.id=0
delete.topic.enable=true
auto.create.topics.enable=false
############################# Socket Server Settings #############################

# kafka对外暴漏的socket服务地址

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = security_protocol://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092
listeners=PLAINTEXT://localhost:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# 处理网络请求的线程数
# The number of threads handling network requests
num.network.threads=3

# 处理磁盘IO的线程数
# The number of threads doing disk I/O
num.io.threads=8

# socket服务器使用的发送缓冲区（SO_SNDBUF），默认是1MB
# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# TCP相关知识
## 每个TCP socket在内核中都由一个发送缓冲区(SO_SNDBUF)和一个接收缓冲区(SO_RCVBUF)。接受缓冲区把数据缓存入内核，应用进程一直没有调用read进行读取的话
## 此数据就会一直缓存在相应socket的接受缓冲区内。不管socket是否读取socket，对端发来的数据都会经由内核接受并且缓存到socket的内核接收缓冲区之中。read所做的工作，就是
## 把内核缓冲区的数据复制到应用层用户的buffer里面。进程调用send发送数据的时候，一般情况下，将数据复制进入socket内核发送缓冲区之中，然后send便会在上层返回。send返回之时
## 数据不一定会发送到对端去，send仅仅是把应用层buffer的数据复制进socket的内核发送buffer中。


# TCP连接的发送缓冲区(SO_SNDBUF)大小，默认是102400字节，如果是-1就是操作系统默认值
# socket服务器使用的接受缓冲区（SO_RCVBUF），默认是1MB
# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# socket服务器将接受的请求的最大大小（针对OOM的保护）
# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# 用逗号分隔的目录列表，用于存储日志文件，kafka消息数据文件存储位置
# A comma seperated list of directories under which to store log files
log.dirs=/tmp/kafka-logs

# 为topic的日志片段分区的默认大小为1，更多的分区允许更多的并行使用，但这也将导致broker中的文件更多。
# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# 每个数据目录在启动时用于日志恢复以及在关闭时用于刷新的线程数。
# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# 对于在RAID阵列中具有数据目录的安装，建议增加该值。
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

# log刷新策略
############################# Log Flush Policy #############################

# 消息是立刻写入文件系统，但是默认情况下，我们仅使用fsync（）来延迟OS缓存的同步。根据配置来控制刷新数据到磁盘
# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.

# There are a few important trade-offs here: 这里有一些重要的权衡：
#1.可用性，如果不实用replication，可能会丢失未刷新的数据
#2.延迟性:当刷新确实发生时，非常大的刷新间隔可能会导致等待时间尖峰，因为将要刷新的数据很多。
#3.吞吐量：刷新通常是最昂贵的操作，而小的刷新间隔可能会导致过度搜寻。
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# 强制将数据刷新到磁盘之前要接受的消息数，默认为10000条
# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# 强制刷新之前，消息可以在日志中停留的最长时间
# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

# 日志保留策略
############################# Log Retention Policy #############################

# 根据配置来控制日志片段的保留时间。策略能够设置删除日志片段在一段时间后，或者在给定的日志片段大小后。
# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# 符合删除条件的日志文件的最小生存时间，168小时，一周，针对每个分区已经关闭的日志片段
# The minimum age of a log file to be eligible for deletion
log.retention.hours=168

#  基于大小的保留策略对于日志。只要其余的片段不低于log.retention.bytes，就会从日志中删除这些段。默认为1GB
# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
#log.retention.bytes=1073741824

# 一个日志片段的最大大小。当这个超过这个大小就会创建一个新的日志片段，当前的日志片段也会被关闭并且等到过期
# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# 根据这个时间间隔来检查是否满足上述的保留策略，不满足则将其删除，单位ms
# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=localhost:2182,localhost:2183,localhost:2184

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000


