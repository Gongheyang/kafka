[ {
  "name" : "BOOLEAN",
  "documentation" : "Represents a boolean value in a byte. Values 0 and 1 are used to represent false and true respectively. When reading a boolean value, any non-zero value is considered true."
}, {
  "name" : "INT8",
  "documentation" : "Represents an integer between -2<sup>7</sup> and 2<sup>7</sup>-1 inclusive."
}, {
  "name" : "INT16",
  "documentation" : "Represents an integer between -2<sup>15</sup> and 2<sup>15</sup>-1 inclusive. The values are encoded using two bytes in network byte order (big-endian)."
}, {
  "name" : "INT32",
  "documentation" : "Represents an integer between -2<sup>31</sup> and 2<sup>31</sup>-1 inclusive. The values are encoded using four bytes in network byte order (big-endian)."
}, {
  "name" : "INT64",
  "documentation" : "Represents an integer between -2<sup>63</sup> and 2<sup>63</sup>-1 inclusive. The values are encoded using eight bytes in network byte order (big-endian)."
}, {
  "name" : "UINT32",
  "documentation" : "Represents an integer between 0 and 2<sup>32</sup>-1 inclusive. The values are encoded using four bytes in network byte order (big-endian)."
}, {
  "name" : "VARINT",
  "documentation" : "Represents an integer between -2<sup>31</sup> and 2<sup>31</sup>-1 inclusive. Encoding follows the variable-length zig-zag encoding from  <a href=\"http://code.google.com/apis/protocolbuffers/docs/encoding.html\"> Google Protocol Buffers</a>."
}, {
  "name" : "VARLONG",
  "documentation" : "Represents an integer between -2<sup>63</sup> and 2<sup>63</sup>-1 inclusive. Encoding follows the variable-length zig-zag encoding from  <a href=\"http://code.google.com/apis/protocolbuffers/docs/encoding.html\"> Google Protocol Buffers</a>."
}, {
  "name" : "UUID",
  "documentation" : "Represents a type 4 immutable universally unique identifier (Uuid). The values are encoded using sixteen bytes in network byte order (big-endian)."
}, {
  "name" : "FLOAT64",
  "documentation" : "Represents a double-precision 64-bit format IEEE 754 value. The values are encoded using eight bytes in network byte order (big-endian)."
}, {
  "name" : "STRING",
  "documentation" : "Represents a sequence of characters. First the length N is given as an INT16. Then N bytes follow which are the UTF-8 encoding of the character sequence. Length must not be negative."
}, {
  "name" : "COMPACT_STRING",
  "documentation" : "Represents a sequence of characters. First the length N + 1 is given as an UNSIGNED_VARINT . Then N bytes follow which are the UTF-8 encoding of the character sequence."
}, {
  "name" : "NULLABLE_STRING",
  "documentation" : "Represents a sequence of characters or null. For non-null strings, first the length N is given as an INT16. Then N bytes follow which are the UTF-8 encoding of the character sequence. A null value is encoded with length of -1 and there are no following bytes."
}, {
  "name" : "COMPACT_NULLABLE_STRING",
  "documentation" : "Represents a sequence of characters. First the length N + 1 is given as an UNSIGNED_VARINT . Then N bytes follow which are the UTF-8 encoding of the character sequence. A null string is represented with a length of 0."
}, {
  "name" : "BYTES",
  "documentation" : "Represents a raw sequence of bytes. First the length N is given as an INT32. Then N bytes follow."
}, {
  "name" : "COMPACT_BYTES",
  "documentation" : "Represents a raw sequence of bytes. First the length N+1 is given as an UNSIGNED_VARINT.Then N bytes follow."
}, {
  "name" : "NULLABLE_BYTES",
  "documentation" : "Represents a raw sequence of bytes or null. For non-null values, first the length N is given as an INT32. Then N bytes follow. A null value is encoded with length of -1 and there are no following bytes."
}, {
  "name" : "COMPACT_NULLABLE_BYTES",
  "documentation" : "Represents a raw sequence of bytes. First the length N+1 is given as an UNSIGNED_VARINT.Then N bytes follow. A null object is represented with a length of 0."
}, {
  "name" : "RECORDS",
  "documentation" : "Represents a sequence of Kafka records as NULLABLE_BYTES. For a detailed description of records see <a href=\"/documentation/#messageformat\">Message Sets</a>."
}, {
  "name" : "ARRAY",
  "documentation" : "Represents a sequence of objects of a given type T. Type T can be either a primitive type (e.g. STRING) or a structure. First, the length N is given as an INT32. Then N instances of type T follow. A null array is represented with a length of -1. In protocol documentation an array of T instances is referred to as [T]."
}, {
  "name" : "COMPACT_ARRAY",
  "documentation" : "Represents a sequence of objects of a given type T. Type T can be either a primitive type (e.g. STRING) or a structure. First, the length N + 1 is given as an UNSIGNED_VARINT. Then N instances of type T follow. A null array is represented with a length of 0. In protocol documentation an array of T instances is referred to as [T]."
} ]
