apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    archiveBaseName = 'kafka-jmh-benchmarks'
}

dependencies {
    implementation(project(':core')) {
        // jmh requires jopt 4.x while `core` depends on 5.0, they are not binary compatible
        exclude group: 'net.sf.jopt-simple', module: 'jopt-simple'
    }
    implementation project(':server-common')
    implementation project(':clients')
    implementation project(':group-coordinator')
    implementation project(':metadata')
    implementation project(':storage')
    implementation project(':streams')
    implementation project(':core')
    implementation project(':connect:api')
    implementation project(':connect:transforms')
    implementation project(':clients').sourceSets.test.output
    implementation project(':core').sourceSets.test.output
    implementation project(':server-common').sourceSets.test.output

    implementation libs.jmhCore
    annotationProcessor libs.jmhGeneratorAnnProcess
    implementation libs.jmhCoreBenchmarks
    implementation libs.jacksonDatabind
    implementation libs.metrics
    implementation libs.mockitoCore
    implementation libs.slf4jlog4j
    implementation libs.scalaLibrary
    implementation libs.scalaJava8Compat
}

tasks.withType(JavaCompile) {
    // Suppress warning caused by code generated by jmh: `warning: [cast] redundant cast to long`
    options.compilerArgs << "-Xlint:-cast"
}

jar {
    manifest {
        attributes "Main-Class": "org.openjdk.jmh.Main"
    }
}

checkstyle {
    configProperties = checkstyleConfigProperties("import-control-jmh-benchmarks.xml")
}

task jmh(type: JavaExec, dependsOn: [':jmh-benchmarks:clean', ':jmh-benchmarks:shadowJar']) {

    mainClass = "-jar"

    doFirst {
        if (System.getProperty("jmhArgs")) {
            args System.getProperty("jmhArgs").split(' ')
        }
        args = [shadowJar.archivePath, *args]
    }
}

javadoc {
    enabled = false
}