// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

archivesBaseName = "kafka-server-common"

dependencies {
    api project(':clients')
    implementation libs.slf4jApi
    implementation libs.metrics
    implementation libs.joptSimple
    implementation libs.jacksonDatabind
    implementation libs.pcollections

    testImplementation project(':clients')
    testImplementation project(':clients').sourceSets.test.output
    testImplementation libs.junitJupiter
    testImplementation libs.mockitoCore
    testImplementation libs.hamcrest

    testRuntimeOnly libs.slf4jlog4j
}

task createVersionFile() {
    def receiptFile = file("$buildDir/kafka/$buildVersionFileName")
    inputs.property "commitId", commitId
    inputs.property "version", version
    outputs.file receiptFile

    doLast {
        def data = [
                commitId: commitId,
                version: version,
        ]

        receiptFile.parentFile.mkdirs()
        def content = data.entrySet().collect { "$it.key=$it.value" }.sort().join("\n")
        receiptFile.setText(content, "ISO-8859-1")
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
}

jar {
    dependsOn createVersionFile
    from("$buildDir") {
        include "kafka/$buildVersionFileName"
    }
}

clean.doFirst {
    delete "$buildDir/kafka/"
}

checkstyle {
    configProperties = checkstyleConfigProperties("import-control-server-common.xml")
}